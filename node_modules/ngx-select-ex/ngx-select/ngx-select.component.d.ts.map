{"version":3,"file":"ngx-select.component.d.ts","sources":["ngx-select.component.d.ts"],"names":[],"mappingssourcesContent":["import { AfterContentChecked, DoCheck, ElementRef, EventEmitter, IterableDiffers, ChangeDetectorRef, InjectionToken, OnDestroy } from '@angular/core';\nimport { ControlValueAccessor } from '@angular/forms';\nimport { DomSanitizer, SafeHtml } from '@angular/platform-browser';\nimport { BehaviorSubject } from 'rxjs';\nimport { NgxSelectOption, TSelectOption } from './ngx-select.classes';\nimport { NgxSelectOptionDirective, NgxSelectOptionNotFoundDirective, NgxSelectOptionSelectedDirective } from './ngx-templates.directive';\nimport { INgxOptionNavigated, INgxSelectOption, INgxSelectOptions } from './ngx-select.interfaces';\nexport declare const NGX_SELECT_OPTIONS: InjectionToken<any>;\nexport interface INgxSelectComponentMouseEvent extends MouseEvent {\n    clickedSelectComponent?: NgxSelectComponent;\n}\nexport declare class NgxSelectComponent implements INgxSelectOptions, ControlValueAccessor, DoCheck, AfterContentChecked, OnDestroy {\n    private sanitizer;\n    private cd;\n    items: any[];\n    optionValueField: string;\n    optionTextField: string;\n    optGroupLabelField: string;\n    optGroupOptionsField: string;\n    multiple: boolean;\n    allowClear: boolean;\n    placeholder: string;\n    noAutoComplete: boolean;\n    disabled: boolean;\n    defaultValue: any[];\n    autoSelectSingleOption: boolean;\n    autoClearSearch: boolean;\n    noResultsFound: string;\n    keepSelectedItems: boolean;\n    size: 'small' | 'default' | 'large';\n    searchCallback: (search: string, item: INgxSelectOption) => boolean;\n    autoActiveOnMouseEnter: boolean;\n    showOptionNotFoundForEmptyItems: boolean;\n    isFocused: boolean;\n    keepSelectMenuOpened: boolean;\n    autocomplete: string;\n    dropDownMenuOtherClasses: string;\n    noSanitize: boolean;\n    keyCodeToRemoveSelected: string;\n    keyCodeToOptionsOpen: string[];\n    keyCodeToOptionsClose: string;\n    keyCodeToOptionsSelect: string[];\n    keyCodeToNavigateFirst: string;\n    keyCodeToNavigatePrevious: string;\n    keyCodeToNavigateNext: string;\n    keyCodeToNavigateLast: string;\n    typed: EventEmitter<string>;\n    focus: EventEmitter<void>;\n    blur: EventEmitter<void>;\n    open: EventEmitter<void>;\n    close: EventEmitter<void>;\n    select: EventEmitter<any>;\n    remove: EventEmitter<any>;\n    navigated: EventEmitter<INgxOptionNavigated>;\n    selectionChanges: EventEmitter<INgxSelectOption[]>;\n    protected mainElRef: ElementRef;\n    inputElRef: ElementRef;\n    protected choiceMenuElRef: ElementRef;\n    templateOption: NgxSelectOptionDirective;\n    templateSelectedOption: NgxSelectOptionSelectedDirective;\n    templateOptionNotFound: NgxSelectOptionNotFoundDirective;\n    optionsOpened: boolean;\n    optionsFiltered: TSelectOption[];\n    private optionActive;\n    private itemsDiffer;\n    private defaultValueDiffer;\n    private actualValue;\n    subjOptions: BehaviorSubject<TSelectOption[]>;\n    private subjSearchText;\n    private subjOptionsSelected;\n    private subjExternalValue;\n    private subjDefaultValue;\n    private subjRegisterOnChange;\n    private cacheOptionsFilteredFlat;\n    private cacheElementOffsetTop;\n    private _focusToInput;\n    /** @internal */\n    get inputText(): any;\n    constructor(iterableDiffers: IterableDiffers, sanitizer: DomSanitizer, cd: ChangeDetectorRef, defaultOptions: INgxSelectOptions);\n    setFormControlSize(otherClassNames?: object, useFormControl?: boolean): ({\n        'form-control-sm input-sm': boolean;\n        'form-control-lg input-lg': boolean;\n    } & object) | ({\n        'form-control-sm input-sm'?: undefined;\n        'form-control-lg input-lg'?: undefined;\n    } & object);\n    setBtnSize(): {\n        'btn-sm': boolean;\n        'btn-lg': boolean;\n    };\n    get optionsSelected(): NgxSelectOption[];\n    mainClicked(event: INgxSelectComponentMouseEvent): void;\n    documentClick(event: INgxSelectComponentMouseEvent): void;\n    private optionsFilteredFlat;\n    private navigateOption;\n    ngDoCheck(): void;\n    ngAfterContentChecked(): void;\n    ngOnDestroy(): void;\n    canClearNotMultiple(): boolean;\n    focusToInput(): void;\n    inputKeyDown(event: KeyboardEvent): void;\n    trackByOption(index: number, option: TSelectOption): string | number;\n    checkInputVisibility(): boolean;\n    /** @internal */\n    inputKeyUp(value: string, event: KeyboardEvent): void;\n    /** @internal */\n    inputClick(value?: string): void;\n    /** @internal */\n    sanitize(html: string): SafeHtml;\n    /** @internal */\n    highlightOption(option: NgxSelectOption): SafeHtml;\n    /** @internal */\n    optionSelect(option: NgxSelectOption, event?: Event): void;\n    /** @internal */\n    optionRemove(option: NgxSelectOption, event: Event): void;\n    /** @internal */\n    optionActivate(navigated: INgxOptionNavigated): void;\n    /** @internal */\n    onMouseEnter(navigated: INgxOptionNavigated): void;\n    private filterOptions;\n    private ensureVisibleElement;\n    showChoiceMenu(): boolean;\n    optionsOpen(search?: string): void;\n    optionsClose(): void;\n    private buildOptions;\n    private buildOption;\n    onChange: (v: any) => any;\n    onTouched: () => void;\n    writeValue(obj: any): void;\n    registerOnChange(fn: (_: any) => {}): void;\n    registerOnTouched(fn: () => {}): void;\n    setDisabledState(isDisabled: boolean): void;\n}\n"]}