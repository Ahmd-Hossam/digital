import { __decorate } from 'tslib';
import { ViewChild, Input, HostListener, Component, forwardRef, NgModule } from '@angular/core';
import { CommonModule } from '@angular/common';
import { NG_VALUE_ACCESSOR, FormsModule } from '@angular/forms';
import { NgSlimScrollModule } from 'ngx-slimscroll';
import { isSameDay, isSameMonth, isSameYear, getDate, getMonth, getYear, isToday, addMonths, subMonths, isAfter, setYear, setMonth, startOfMonth, endOfMonth, eachDayOfInterval, getDay, subDays, addDays, format, setDay, isBefore } from 'date-fns';

import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '@angular/common';
import * as ɵngcc2 from '@angular/forms';
import * as ɵngcc3 from 'ngx-slimscroll';

const _c0 = ["container"];
const _c1 = ["inputElement"];
function NgxDatesPickerComponent_input_1_Template(rf, ctx) { if (rf & 1) {
    const _r4 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "input", 3, 4);
    ɵngcc0.ɵɵlistener("ngModelChange", function NgxDatesPickerComponent_input_1_Template_input_ngModelChange_0_listener($event) { ɵngcc0.ɵɵrestoreView(_r4); const ctx_r3 = ɵngcc0.ɵɵnextContext(); return ctx_r3.displayValue = $event; })("click", function NgxDatesPickerComponent_input_1_Template_input_click_0_listener() { ɵngcc0.ɵɵrestoreView(_r4); const ctx_r5 = ɵngcc0.ɵɵnextContext(); return ctx_r5.toggle(); });
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r0 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵproperty("ngModel", ctx_r0.displayValue)("placeholder", ctx_r0.currentOptions.placeholder)("ngClass", ctx_r0.currentOptions.addClass)("ngStyle", ctx_r0.currentOptions.addStyle)("id", ctx_r0.fieldId)("disabled", ctx_r0.disabled);
} }
function NgxDatesPickerComponent_div_3_ng_template_4_Template(rf, ctx) { }
function NgxDatesPickerComponent_div_3_ng_template_5_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵnamespaceSVG();
    ɵngcc0.ɵɵelementStart(0, "svg", 15);
    ɵngcc0.ɵɵelementStart(1, "g", 16);
    ɵngcc0.ɵɵelementStart(2, "g", 17);
    ɵngcc0.ɵɵelementStart(3, "g", 18);
    ɵngcc0.ɵɵelementStart(4, "g", 19);
    ɵngcc0.ɵɵelementStart(5, "g", 20);
    ɵngcc0.ɵɵelementStart(6, "g", 21);
    ɵngcc0.ɵɵelementStart(7, "g", 22);
    ɵngcc0.ɵɵelement(8, "polygon", 23);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} }
function NgxDatesPickerComponent_div_3_ng_template_10_Template(rf, ctx) { }
function NgxDatesPickerComponent_div_3_ng_template_11_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵnamespaceSVG();
    ɵngcc0.ɵɵelementStart(0, "svg", 24);
    ɵngcc0.ɵɵelementStart(1, "g", 25);
    ɵngcc0.ɵɵelementStart(2, "g", 26);
    ɵngcc0.ɵɵelementStart(3, "g", 27);
    ɵngcc0.ɵɵelementStart(4, "g", 28);
    ɵngcc0.ɵɵelementStart(5, "g", 29);
    ɵngcc0.ɵɵelementStart(6, "g", 30);
    ɵngcc0.ɵɵelementStart(7, "g", 22);
    ɵngcc0.ɵɵelement(8, "polygon", 31);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} }
function NgxDatesPickerComponent_div_3_ng_container_14_span_2_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "span", 36);
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const name_r18 = ctx.$implicit;
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate(name_r18);
} }
function NgxDatesPickerComponent_div_3_ng_container_14_span_4_Template(rf, ctx) { if (rf & 1) {
    const _r22 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "span", 37);
    ɵngcc0.ɵɵlistener("click", function NgxDatesPickerComponent_div_3_ng_container_14_span_4_Template_span_click_0_listener() { ɵngcc0.ɵɵrestoreView(_r22); const day_r19 = ctx.$implicit; const i_r20 = ctx.index; const ctx_r21 = ɵngcc0.ɵɵnextContext(3); return day_r19.isSelectable && ctx_r21.setDate(i_r20); });
    ɵngcc0.ɵɵelementStart(1, "span", 38);
    ɵngcc0.ɵɵtext(2);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelement(3, "span", 39);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const day_r19 = ctx.$implicit;
    const ctx_r17 = ɵngcc0.ɵɵnextContext(3);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngClass", ctx_r17.getDayClasses(day_r19));
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate(day_r19.isVisible ? day_r19.day : "");
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngClass", ctx_r17.getDayClasses(day_r19));
} }
function NgxDatesPickerComponent_div_3_ng_container_14_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementContainerStart(0);
    ɵngcc0.ɵɵelementStart(1, "div", 32);
    ɵngcc0.ɵɵtemplate(2, NgxDatesPickerComponent_div_3_ng_container_14_span_2_Template, 2, 1, "span", 33);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(3, "div", 34);
    ɵngcc0.ɵɵtemplate(4, NgxDatesPickerComponent_div_3_ng_container_14_span_4_Template, 4, 3, "span", 35);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementContainerEnd();
} if (rf & 2) {
    const ctx_r13 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("ngForOf", ctx_r13.dayNames);
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("ngForOf", ctx_r13.days);
} }
const _c2 = function (a0) { return { "is-selected": a0 }; };
function NgxDatesPickerComponent_div_3_div_15_span_2_Template(rf, ctx) { if (rf & 1) {
    const _r27 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "span", 42);
    ɵngcc0.ɵɵlistener("click", function NgxDatesPickerComponent_div_3_div_15_span_2_Template_span_click_0_listener() { ɵngcc0.ɵɵrestoreView(_r27); const i_r25 = ctx.index; const ctx_r26 = ɵngcc0.ɵɵnextContext(3); return ctx_r26.setYear(i_r25); });
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const year_r24 = ctx.$implicit;
    ɵngcc0.ɵɵproperty("ngClass", ɵngcc0.ɵɵpureFunction1(2, _c2, year_r24.isThisYear));
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate1(" ", year_r24.year, " ");
} }
function NgxDatesPickerComponent_div_3_div_15_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "div");
    ɵngcc0.ɵɵelementStart(1, "div", 40);
    ɵngcc0.ɵɵtemplate(2, NgxDatesPickerComponent_div_3_div_15_span_2_Template, 2, 4, "span", 41);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r14 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("options", ctx_r14.scrollOptions);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngForOf", ctx_r14.years);
} }
function NgxDatesPickerComponent_div_3_div_16_span_1_Template(rf, ctx) { if (rf & 1) {
    const _r32 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "span", 45);
    ɵngcc0.ɵɵlistener("click", function NgxDatesPickerComponent_div_3_div_16_span_1_Template_span_click_0_listener() { ɵngcc0.ɵɵrestoreView(_r32); const i_r30 = ctx.index; const ctx_r31 = ɵngcc0.ɵɵnextContext(3); return ctx_r31.setMonth(i_r30); });
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const month_r29 = ctx.$implicit;
    ɵngcc0.ɵɵproperty("ngClass", ɵngcc0.ɵɵpureFunction1(2, _c2, month_r29.isSelected));
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate1(" ", month_r29.name, " ");
} }
function NgxDatesPickerComponent_div_3_div_16_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "div", 43);
    ɵngcc0.ɵɵtemplate(1, NgxDatesPickerComponent_div_3_div_16_span_1_Template, 2, 4, "span", 44);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r15 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngForOf", ctx_r15.months);
} }
function NgxDatesPickerComponent_div_3_Template(rf, ctx) { if (rf & 1) {
    const _r34 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "div", null, 5);
    ɵngcc0.ɵɵelementStart(2, "div", 6);
    ɵngcc0.ɵɵelementStart(3, "div", 7);
    ɵngcc0.ɵɵlistener("click", function NgxDatesPickerComponent_div_3_Template_div_click_3_listener() { ɵngcc0.ɵɵrestoreView(_r34); const ctx_r33 = ɵngcc0.ɵɵnextContext(); return ctx_r33.prevMonth(); });
    ɵngcc0.ɵɵtemplate(4, NgxDatesPickerComponent_div_3_ng_template_4_Template, 0, 0, "ng-template", 8);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵtemplate(5, NgxDatesPickerComponent_div_3_ng_template_5_Template, 9, 0, "ng-template", null, 9, ɵngcc0.ɵɵtemplateRefExtractor);
    ɵngcc0.ɵɵelementStart(7, "span", 10);
    ɵngcc0.ɵɵlistener("click", function NgxDatesPickerComponent_div_3_Template_span_click_7_listener() { ɵngcc0.ɵɵrestoreView(_r34); const ctx_r35 = ɵngcc0.ɵɵnextContext(); return ctx_r35.toggleView(); });
    ɵngcc0.ɵɵtext(8);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(9, "div", 7);
    ɵngcc0.ɵɵlistener("click", function NgxDatesPickerComponent_div_3_Template_div_click_9_listener() { ɵngcc0.ɵɵrestoreView(_r34); const ctx_r36 = ɵngcc0.ɵɵnextContext(); return ctx_r36.nextMonth(); });
    ɵngcc0.ɵɵtemplate(10, NgxDatesPickerComponent_div_3_ng_template_10_Template, 0, 0, "ng-template", 8);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵtemplate(11, NgxDatesPickerComponent_div_3_ng_template_11_Template, 9, 0, "ng-template", null, 11, ɵngcc0.ɵɵtemplateRefExtractor);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(13, "div", 12);
    ɵngcc0.ɵɵtemplate(14, NgxDatesPickerComponent_div_3_ng_container_14_Template, 5, 2, "ng-container", 13);
    ɵngcc0.ɵɵtemplate(15, NgxDatesPickerComponent_div_3_div_15_Template, 3, 2, "div", 13);
    ɵngcc0.ɵɵtemplate(16, NgxDatesPickerComponent_div_3_div_16_Template, 2, 1, "div", 14);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const _r8 = ɵngcc0.ɵɵreference(6);
    const _r11 = ɵngcc0.ɵɵreference(12);
    const ctx_r1 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵclassMapInterpolate1("ngx-dates-picker-calendar-container ngx-dates-picker-position-", ctx_r1.position, "");
    ɵngcc0.ɵɵadvance(4);
    ɵngcc0.ɵɵproperty("ngTemplateOutlet", ctx_r1.previousMonthButtonTemplate || _r8);
    ɵngcc0.ɵɵadvance(4);
    ɵngcc0.ɵɵtextInterpolate(ctx_r1.barTitle);
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("ngTemplateOutlet", ctx_r1.nextMonthButtonTemplate || _r11);
    ɵngcc0.ɵɵadvance(4);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r1.view === "days");
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r1.view === "years");
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r1.view === "months");
} }
const _c3 = ["*"];
const isSameDate = (date, current) => (isSameDay(date, current) && isSameMonth(date, current) && isSameYear(date, current));

const createDateRange = (start, end) => ({
    start: new Date(start.getTime()),
    end: new Date(end.getTime()),
});

var NgxDatesPickerComponent_1;
// Counter for calculating the auto-incrementing field ID
let counter = 0;
/**
 * Internal library helper that helps to check if value is empty
 * @param value
 */
const isNil = (value) => {
    return (typeof value === 'undefined') || (value === null);
};
const ɵ0 = isNil;
let NgxDatesPickerComponent = NgxDatesPickerComponent_1 = class NgxDatesPickerComponent {
    constructor() {
        /**
         * Disable datepicker's input
         */
        this.headless = false;
        /**
         * Set datepicker's visibility state
         */
        this.isOpened = false;
        /**
         * Datepicker dropdown position
         */
        this.position = 'bottom-right';
        this.currentOptions = {
            closeOnClickOutside: true,
            closeOnSelection: true,
            includeDays: 'previous-month',
            includeNextMonthsFirstFullWeek: false,
            minYear: 1970,
            maxYear: 2030,
            displayFormat: 'MMM dd, yyyy',
            barTitleFormat: 'MMMM yyyy',
            dayNamesFormat: 'EEE',
            rangeSeparator: '-',
            selectRange: false,
            firstCalendarDay: 0,
            barTitleIfEmpty: 'Click to select a date',
            locale: {},
            placeholder: '',
            addClass: {},
            addStyle: {},
            fieldId: this.defaultFieldId,
            useEmptyBarTitle: true,
        };
        this.onTouchedCallback = () => { };
        this.onChangeCallback = () => { };
        this.formatDay = (date, isVisible = true) => ({
            date: date,
            day: getDate(date),
            month: getMonth(date),
            year: getYear(date),
            inThisMonth: isSameMonth(date, this.viewingDate),
            isToday: isVisible && isToday(date),
            isSelected: isVisible && this.isDateSelected(date),
            isInRange: isVisible && this.isInRange(date),
            isSelectable: isVisible && this.isDateSelectable(date),
            isStart: isVisible && this.isRangeBoundary(date, 'start'),
            isEnd: isVisible && this.isRangeBoundary(date, 'end'),
            isVisible,
        });
        this.scrollOptions = {
            barBackground: '#DFE3E9',
            gridBackground: '#FFFFFF',
            barBorderRadius: '3',
            gridBorderRadius: '3',
            barWidth: '6',
            gridWidth: '6',
            barMargin: '0',
            gridMargin: '0'
        };
    }
    setDisabledState(isDisabled) {
        this.disabled = isDisabled;
    }
    set range(val) {
        this._range = val;
        this.onChangeCallback(this.getValueToEmit(val));
    }
    get range() {
        return this._range;
    }
    ngOnInit() {
        this.view = 'days';
        this.range = {
            start: new Date(),
            end: new Date(),
        };
        this.viewingDate = new Date();
        this.initDayNames();
        this.initYears();
        this.initMonths();
    }
    ngOnChanges(changes) {
        if ('options' in changes) {
            this.updateOptions(changes.options.currentValue);
            this.initDayNames();
            this.init();
            this.initYears();
            this.initMonths();
        }
    }
    get defaultFieldId() {
        // Only evaluate and increment if required
        const value = `datepicker-${counter++}`;
        Object.defineProperty(this, 'defaultFieldId', { value });
        return value;
    }
    updateOptions(options) {
        this.currentOptions = Object.assign(Object.assign({}, this.currentOptions), options);
    }
    nextMonth() {
        this.viewingDate = addMonths(this.viewingDate, 1);
        this.init();
    }
    prevMonth() {
        this.viewingDate = subMonths(this.viewingDate, 1);
        this.init();
    }
    setDate(i) {
        const date = this.days[i].date;
        if (this.currentOptions.selectRange) {
            if (!this.range.start && !this.range.end) {
                this.range.start = date;
            }
            else if (this.range.start && !this.range.end && isAfter(date, this.range.start)) {
                this.range.end = date;
            }
            else {
                this.range.end = undefined;
                this.range.start = date;
            }
        }
        else {
            this.range.start = this.range.end = date;
        }
        this.init();
        this.onChangeCallback(this.getValueToEmit(this.range));
        if (this.currentOptions.closeOnSelection && this.range.end) {
            this.close();
        }
    }
    setYear(i) {
        this.viewingDate = setYear(this.viewingDate, this.years[i].year);
        this.init();
        this.initYears();
        this.view = 'months';
    }
    setMonth(i) {
        this.viewingDate = setMonth(this.viewingDate, this.months[i].month);
        this.init();
        this.initMonths();
        this.view = 'days';
    }
    init() {
        if (!this.viewingDate) {
            return;
        }
        const start = startOfMonth(this.viewingDate);
        const end = endOfMonth(this.viewingDate);
        this.days = eachDayOfInterval({ start, end }).map((date) => this.formatDay(date));
        const firstMonthDay = getDay(start) - this.currentOptions.firstCalendarDay;
        const prevDays = firstMonthDay < 0 ? 7 - this.currentOptions.firstCalendarDay : firstMonthDay;
        let nextDays = (this.currentOptions.firstCalendarDay === 1 ? 7 : 6) - getDay(end);
        const showPrevMonthDays = this.currentOptions.includeDays === 'all' || this.currentOptions.includeDays === 'previous-month';
        const showNextMonthDays = this.currentOptions.includeDays === 'all' || this.currentOptions.includeDays === 'next-month';
        if (showNextMonthDays && this.currentOptions.includeNextMonthsFirstFullWeek) {
            nextDays += 7;
        }
        for (let i = 1; i <= prevDays; i++) {
            this.days.unshift(this.formatDay(subDays(start, i), showPrevMonthDays));
        }
        new Array(nextDays).fill(undefined)
            .forEach((_, i) => this.days.push(this.formatDay(addDays(end, i + 1), showNextMonthDays)));
        this.displayValue = this.formatDisplay();
        if (this.range) {
            this.barTitle = format(this.viewingDate, this.currentOptions.barTitleFormat, this.currentOptions.locale);
        }
        else {
            this.barTitle = this.currentOptions.useEmptyBarTitle ?
                this.currentOptions.barTitleIfEmpty :
                format(this.viewingDate, this.currentOptions.barTitleFormat, this.currentOptions.locale);
        }
    }
    initYears() {
        const range = this.currentOptions.maxYear - this.currentOptions.minYear;
        this.years = Array.from(new Array(range), (x, i) => i + this.currentOptions.minYear).map((year) => {
            return { year: year, isThisYear: year === getYear(this.viewingDate) };
        });
    }
    initMonths() {
        this.months = Array.from(new Array(12), (x, i) => setMonth(new Date(), i + 1))
            .map((date) => {
            return { month: date.getMonth(), name: format(date, 'MMM'), isSelected: date.getMonth() === getMonth(this.viewingDate) };
        });
    }
    initDayNames() {
        this.dayNames = [];
        const start = this.currentOptions.firstCalendarDay;
        for (let i = start; i <= 6 + start; i++) {
            const date = setDay(new Date(), i);
            this.dayNames.push(format(date, this.currentOptions.dayNamesFormat, this.currentOptions.locale));
        }
    }
    toggleView() {
        this.view = this.view === 'days' ? 'years' : 'days';
    }
    toggle() {
        this.isOpened = !this.isOpened;
        if (!this.isOpened && this.view === 'years') {
            this.toggleView();
        }
    }
    close() {
        this.isOpened = false;
        if (this.view === 'years') {
            this.toggleView();
        }
    }
    reset() {
        this.range = {
            start: new Date(),
            end: new Date(),
        };
        this.init();
    }
    writeValue(val) {
        if (val) {
            if (typeof val === 'string') {
                this.range.start = this.range.end = new Date(val);
            }
            else if (val instanceof Date) {
                this.range.start = this.range.end = val;
            }
            else if (val.start) { // Checking if it's instance of DateRange
                this.range = val;
            }
            else {
                throw Error('Invalid input data type');
            }
            this.viewingDate = this.range.start || this.viewingDate;
            this.init();
        }
    }
    registerOnChange(fn) {
        this.onChangeCallback = fn;
    }
    registerOnTouched(fn) {
        this.onTouchedCallback = fn;
    }
    onBlur(e) {
        if (!this.isOpened || !this.currentOptions.closeOnClickOutside) {
            return;
        }
        if (this.inputElement == null) {
            return;
        }
        if (e.target === this.inputElement.nativeElement ||
            this.inputElement.nativeElement.contains(e.target) ||
            (e.target.parentElement && e.target.parentElement.classList.contains('day-unit'))) {
            return;
        }
        if (this.calendarContainerElement.nativeElement !== e.target &&
            !this.calendarContainerElement.nativeElement.contains(e.target) &&
            !e.target.classList.contains('year-unit') &&
            !e.target.classList.contains('month-unit')) {
            this.close();
        }
    }
    getDayClasses(day) {
        return {
            'is-prev-month': !day.inThisMonth,
            'is-today': day.isToday,
            'is-selected': day.isSelected,
            'is-in-range': day.isInRange,
            'is-disabled': !day.isSelectable,
            'range-start': day.isStart,
            'range-end': day.isEnd,
            'is-visible': day.isVisible,
        };
    }
    /**
     * Checks if specified date is in range of min and max dates
     * @param date
     */
    isDateSelectable(date) {
        const minDateSet = !isNil(this.currentOptions.minDate);
        const maxDateSet = !isNil(this.currentOptions.maxDate);
        const timestamp = date.valueOf();
        return (!(minDateSet && timestamp < this.currentOptions.minDate.valueOf()) ||
            (!(maxDateSet && timestamp > this.currentOptions.maxDate.valueOf())));
    }
    isDateSelected(date) {
        return isSameDate(date, this.range.start) || isSameDate(date, this.range.end);
    }
    isInRange(date) {
        return this.isDateSelected(date) || (isAfter(date, this.range.start) && isBefore(date, this.range.end));
    }
    formatDisplay() {
        if (!this.range) {
            return '';
        }
        const formattedStartDate = format(this.range.start, this.currentOptions.displayFormat, this.currentOptions.locale);
        if (this.currentOptions.selectRange) {
            const formattedEndDate = format(this.range.end || this.range.start, this.currentOptions.displayFormat, this.currentOptions.locale);
            return `${formattedStartDate}${this.currentOptions.rangeSeparator}${formattedEndDate}`;
        }
        return formattedStartDate;
    }
    isRangeBoundary(date, boundary) {
        return !this.range[boundary] || isSameDate(date, this.range[boundary]);
    }
    getValueToEmit(range) {
        if (!this.currentOptions.selectRange) {
            return new Date(range.start.getTime());
        }
        if (range.end) {
            return createDateRange(range.start, range.end);
        }
        return createDateRange(range.start, range.start);
    }
};
NgxDatesPickerComponent.ɵfac = function NgxDatesPickerComponent_Factory(t) { return new (t || NgxDatesPickerComponent)(); };
NgxDatesPickerComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: NgxDatesPickerComponent, selectors: [["ngx-dates-picker"]], viewQuery: function NgxDatesPickerComponent_Query(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵviewQuery(_c0, 1);
        ɵngcc0.ɵɵviewQuery(_c1, 1);
    } if (rf & 2) {
        let _t;
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.calendarContainerElement = _t.first);
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.inputElement = _t.first);
    } }, hostBindings: function NgxDatesPickerComponent_HostBindings(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵlistener("click", function NgxDatesPickerComponent_click_HostBindingHandler($event) { return ctx.onBlur($event); }, false, ɵngcc0.ɵɵresolveDocument);
    } }, inputs: { headless: "headless", isOpened: "isOpened", position: "position", options: "options", previousMonthButtonTemplate: "previousMonthButtonTemplate", nextMonthButtonTemplate: "nextMonthButtonTemplate" }, features: [ɵngcc0.ɵɵProvidersFeature([
            { provide: NG_VALUE_ACCESSOR, useExisting: forwardRef(() => NgxDatesPickerComponent_1), multi: true }
        ]), ɵngcc0.ɵɵNgOnChangesFeature], ngContentSelectors: _c3, decls: 4, vars: 2, consts: [[1, "ngx-dates-picker-container"], ["type", "text", "class", "ngx-dates-picker-input", "readonly", "", 3, "ngModel", "placeholder", "ngClass", "ngStyle", "id", "disabled", "ngModelChange", "click", 4, "ngIf"], [3, "class", 4, "ngIf"], ["type", "text", "readonly", "", 1, "ngx-dates-picker-input", 3, "ngModel", "placeholder", "ngClass", "ngStyle", "id", "disabled", "ngModelChange", "click"], ["inputElement", ""], ["container", ""], [1, "topbar-container"], [3, "click"], [3, "ngTemplateOutlet"], ["defaultPreviousMonthTemplate", ""], [1, "topbar-title", 3, "click"], ["defaultNextMonthTemplate", ""], [1, "main-calendar-container"], [4, "ngIf"], ["class", "main-calendar-months", 4, "ngIf"], ["width", "7px", "height", "10px", "viewBox", "0 0 7 10", "version", "1.1", "xmlns", "http://www.w3.org/2000/svg", 0, "xmlns", "xlink", "http://www.w3.org/1999/xlink"], ["stroke", "none", "stroke-width", "1", "fill", "none", "fill-rule", "evenodd"], ["transform", "translate(-923.000000, -1882.000000)", "fill", "#CED0DA"], ["transform", "translate(80.000000, 1361.000000)"], ["transform", "translate(0.000000, 430.000000)"], ["transform", "translate(825.000000, 0.000000)"], ["transform", "translate(0.000000, 72.000000)"], ["transform", "translate(18.000000, 15.000000)"], ["id", "Back", "points", "6.015 4 0 9.013 6.015 14.025"], ["width", "7px", "height", "10px", "viewBox", "0 0 6 10", "version", "1.1", "xmlns", "http://www.w3.org/2000/svg", 0, "xmlns", "xlink", "http://www.w3.org/1999/xlink"], ["id", "Source-Sans---UI-Elements-Kit", "stroke", "none", "stroke-width", "1", "fill", "none", "fill-rule", "evenodd"], ["id", "White-Layout", "transform", "translate(-1182.000000, -1882.000000)", "fill", "#CED0DA"], ["id", "Dropdowns-&-Selector", "transform", "translate(80.000000, 1361.000000)"], ["id", "Dropdowns", "transform", "translate(0.000000, 430.000000)"], ["id", "Calendar", "transform", "translate(825.000000, 0.000000)"], ["transform", "translate(0.000000, 72.000000)", "id", "Top-Bar-Nav"], ["id", "Forward", "transform", "translate(262.007500, 9.012500) scale(-1, 1) translate(-262.007500, -9.012500) ", "points", "265.015 4 259 9.013 265.015 14.025"], [1, "main-calendar-day-names"], ["class", "day-name-unit", 4, "ngFor", "ngForOf"], [1, "main-calendar-days"], ["class", "day-unit", 3, "click", 4, "ngFor", "ngForOf"], [1, "day-name-unit"], [1, "day-unit", 3, "click"], [1, "day-background-upper", 3, "ngClass"], [1, "day-background-lower", 3, "ngClass"], ["slimScroll", "", 1, "main-calendar-years", 3, "options"], ["class", "year-unit", 3, "ngClass", "click", 4, "ngFor", "ngForOf"], [1, "year-unit", 3, "ngClass", "click"], [1, "main-calendar-months"], ["class", "month-unit", 3, "ngClass", "click", 4, "ngFor", "ngForOf"], [1, "month-unit", 3, "ngClass", "click"]], template: function NgxDatesPickerComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵelementStart(0, "div", 0);
        ɵngcc0.ɵɵtemplate(1, NgxDatesPickerComponent_input_1_Template, 2, 6, "input", 1);
        ɵngcc0.ɵɵprojection(2);
        ɵngcc0.ɵɵtemplate(3, NgxDatesPickerComponent_div_3_Template, 17, 9, "div", 2);
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", !ctx.headless);
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵproperty("ngIf", ctx.isOpened);
    } }, directives: [ɵngcc1.NgIf, ɵngcc2.DefaultValueAccessor, ɵngcc2.NgControlStatus, ɵngcc2.NgModel, ɵngcc1.NgClass, ɵngcc1.NgStyle, ɵngcc1.NgTemplateOutlet, ɵngcc1.NgForOf, ɵngcc3.SlimScrollDirective], styles: [".ngx-dates-picker-position-bottom-left[_ngcontent-%COMP%]{top:40px;right:0}.ngx-dates-picker-position-bottom-right[_ngcontent-%COMP%]{top:40px;left:0}.ngx-dates-picker-position-top-left[_ngcontent-%COMP%]{bottom:40px;right:0}.ngx-dates-picker-position-top-right[_ngcontent-%COMP%]{bottom:40px;left:0}.ngx-dates-picker-position-static[_ngcontent-%COMP%]{position:static!important}.ngx-dates-picker-container[_ngcontent-%COMP%]{position:relative}.ngx-dates-picker-input[_ngcontent-%COMP%]{padding:5px 10px;font-size:14px;width:200px;outline:0;border:1px solid #dfe3e9}.ngx-dates-picker-calendar-container[_ngcontent-%COMP%]{position:absolute;width:300px;background:#fff;box-shadow:0 1px 4px 0 rgba(0,0,0,.08);border:1px solid #dfe3e9;border-radius:4px}.topbar-container[_ngcontent-%COMP%]{width:100%;height:50px;padding:0 15px;border-bottom:1px solid #dfe3e9;display:flex;justify-content:space-between;align-items:center;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none}.topbar-container[_ngcontent-%COMP%]   svg[_ngcontent-%COMP%]{cursor:pointer}.topbar-container[_ngcontent-%COMP%]   svg[_ngcontent-%COMP%]   g[_ngcontent-%COMP%]{fill:#ced0da}.topbar-container[_ngcontent-%COMP%]   div[_ngcontent-%COMP%]{cursor:pointer}.topbar-title[_ngcontent-%COMP%]{color:#3d495c;font-size:14px;font-weight:600;cursor:pointer}.main-calendar-container[_ngcontent-%COMP%]{width:100%;height:100%;padding:15px 10px 0;font-size:12px;font-weight:500}.main-calendar-day-names[_ngcontent-%COMP%]{color:#cbcbcb;width:100%;display:flex;align-items:center}.day-name-unit[_ngcontent-%COMP%]{width:calc(100% / 7);text-transform:uppercase;text-align:center}.main-calendar-days[_ngcontent-%COMP%], .main-calendar-years[_ngcontent-%COMP%]{padding:15px 0 0;width:100%;display:inline-block;overflow:hidden}.day-unit[_ngcontent-%COMP%], .month-unit[_ngcontent-%COMP%], .year-unit[_ngcontent-%COMP%]{position:relative;width:calc(100% / 7);font-size:14px;font-weight:400;height:40px;display:inline-flex;float:left;align-items:center;justify-content:center;cursor:pointer;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none}.day-background-upper[_ngcontent-%COMP%]{display:inline-flex;position:absolute;z-index:1;width:100%;height:100%;border-radius:50%;align-items:center;justify-content:center}.day-background-upper.is-selected[_ngcontent-%COMP%]{background:#0186ff;color:#fff}.day-background-upper[_ngcontent-%COMP%]:not(.is-visible){cursor:default}.day-background-upper.is-visible[_ngcontent-%COMP%]:hover{background:#f0f0f0;color:#000}.day-background-upper.is-visible.is-prev-month[_ngcontent-%COMP%]{color:#cbcbcb}.day-background-upper.is-visible.is-disabled[_ngcontent-%COMP%]{cursor:not-allowed;color:#cbcbcb}.day-background-lower[_ngcontent-%COMP%]{display:inline-flex;position:absolute;z-index:0;width:100%;height:100%;align-items:center;justify-content:center;border-top:2px solid #fff;border-bottom:2px solid #fff}.day-background-lower.is-in-range[_ngcontent-%COMP%]{background:rgba(1,134,255,.1)}.day-background-lower.range-start[_ngcontent-%COMP%]{border-bottom-left-radius:50%;border-top-left-radius:50%}.day-background-lower.range-end[_ngcontent-%COMP%]{border-bottom-right-radius:50%;border-top-right-radius:50%}.main-calendar-years[_ngcontent-%COMP%]{height:210px;display:block;padding:0}.month-unit[_ngcontent-%COMP%]{width:calc(100% / 4);height:54px}.year-unit[_ngcontent-%COMP%]{width:calc(100% / 3)}.month-unit[_ngcontent-%COMP%], .year-unit[_ngcontent-%COMP%]{border-radius:10px}.month-unit.is-selected[_ngcontent-%COMP%], .year-unit.is-selected[_ngcontent-%COMP%]{background:#0186ff;color:#fff}.month-unit[_ngcontent-%COMP%]:hover, .year-unit[_ngcontent-%COMP%]:hover{background:#f0f0f0;color:#000}.main-calendar-months[_ngcontent-%COMP%]{padding-bottom:10px;display:inline-block}"] });
__decorate([
    ViewChild('container')
], NgxDatesPickerComponent.prototype, "calendarContainerElement", void 0);
__decorate([
    ViewChild('inputElement')
], NgxDatesPickerComponent.prototype, "inputElement", void 0);
__decorate([
    Input()
], NgxDatesPickerComponent.prototype, "options", void 0);
__decorate([
    Input()
], NgxDatesPickerComponent.prototype, "headless", void 0);
__decorate([
    Input()
], NgxDatesPickerComponent.prototype, "isOpened", void 0);
__decorate([
    Input()
], NgxDatesPickerComponent.prototype, "position", void 0);
__decorate([
    Input()
], NgxDatesPickerComponent.prototype, "previousMonthButtonTemplate", void 0);
__decorate([
    Input()
], NgxDatesPickerComponent.prototype, "nextMonthButtonTemplate", void 0);
__decorate([
    HostListener('document:click', ['$event'])
], NgxDatesPickerComponent.prototype, "onBlur", null);

let NgxDatesPickerModule = class NgxDatesPickerModule {
};
NgxDatesPickerModule.ɵfac = function NgxDatesPickerModule_Factory(t) { return new (t || NgxDatesPickerModule)(); };
NgxDatesPickerModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: NgxDatesPickerModule });
NgxDatesPickerModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ imports: [[CommonModule, FormsModule, NgSlimScrollModule], CommonModule, FormsModule, NgSlimScrollModule] });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(NgxDatesPickerComponent, [{
        type: Component,
        args: [{
                selector: 'ngx-dates-picker',
                template: "<div class=\"ngx-dates-picker-container\">\n  <input *ngIf=\"!headless\"\n         #inputElement\n         type=\"text\"\n         class=\"ngx-dates-picker-input\"\n         [(ngModel)]=\"displayValue\"\n         readonly\n         [placeholder]=\"currentOptions.placeholder\"\n         [ngClass]=\"currentOptions.addClass\"\n         [ngStyle]=\"currentOptions.addStyle\"\n         [id]=\"fieldId\"\n         [disabled]=\"disabled\"\n         (click)=\"toggle()\" />\n  <ng-content></ng-content>\n  <div class=\"ngx-dates-picker-calendar-container ngx-dates-picker-position-{{position}}\"\n       *ngIf=\"isOpened\"\n       #container>\n    <div class=\"topbar-container\">\n      <div (click)=\"prevMonth()\">\n        <ng-template [ngTemplateOutlet]=\"previousMonthButtonTemplate || defaultPreviousMonthTemplate\"></ng-template>\n      </div>\n      <ng-template #defaultPreviousMonthTemplate>\n        <svg width=\"7px\"\n             height=\"10px\"\n             viewBox=\"0 0 7 10\"\n             version=\"1.1\"\n             xmlns=\"http://www.w3.org/2000/svg\"\n             xmlns:xlink=\"http://www.w3.org/1999/xlink\">\n          <g stroke=\"none\" stroke-width=\"1\" fill=\"none\" fill-rule=\"evenodd\">\n            <g transform=\"translate(-923.000000, -1882.000000)\" fill=\"#CED0DA\">\n              <g transform=\"translate(80.000000, 1361.000000)\">\n                <g transform=\"translate(0.000000, 430.000000)\">\n                  <g transform=\"translate(825.000000, 0.000000)\">\n                    <g transform=\"translate(0.000000, 72.000000)\">\n                      <g transform=\"translate(18.000000, 15.000000)\">\n                        <polygon id=\"Back\" points=\"6.015 4 0 9.013 6.015 14.025\"></polygon>\n                      </g>\n                    </g>\n                  </g>\n                </g>\n              </g>\n            </g>\n          </g>\n        </svg>\n      </ng-template>\n      <span class=\"topbar-title\" (click)=\"toggleView()\">{{ barTitle }}</span>\n      <div (click)=\"nextMonth()\">\n        <ng-template [ngTemplateOutlet]=\"nextMonthButtonTemplate || defaultNextMonthTemplate\"></ng-template>\n      </div>\n      <ng-template #defaultNextMonthTemplate>\n        <svg width=\"7px\"\n             height=\"10px\"\n             viewBox=\"0 0 6 10\"\n             version=\"1.1\"\n             xmlns=\"http://www.w3.org/2000/svg\"\n             xmlns:xlink=\"http://www.w3.org/1999/xlink\">\n          <g id=\"Source-Sans---UI-Elements-Kit\" stroke=\"none\" stroke-width=\"1\" fill=\"none\" fill-rule=\"evenodd\">\n            <g id=\"White-Layout\" transform=\"translate(-1182.000000, -1882.000000)\" fill=\"#CED0DA\">\n              <g id=\"Dropdowns-&amp;-Selector\" transform=\"translate(80.000000, 1361.000000)\">\n                <g id=\"Dropdowns\" transform=\"translate(0.000000, 430.000000)\">\n                  <g id=\"Calendar\" transform=\"translate(825.000000, 0.000000)\">\n                    <g transform=\"translate(0.000000, 72.000000)\" id=\"Top-Bar-Nav\">\n                      <g transform=\"translate(18.000000, 15.000000)\">\n                        <polygon id=\"Forward\"\n                                 transform=\"translate(262.007500, 9.012500) scale(-1, 1) translate(-262.007500, -9.012500) \"\n                                 points=\"265.015 4 259 9.013 265.015 14.025\">\n                        </polygon>\n                      </g>\n                    </g>\n                  </g>\n                </g>\n              </g>\n            </g>\n          </g>\n        </svg>\n      </ng-template>\n    </div>\n    <div class=\"main-calendar-container\">\n      <ng-container *ngIf=\"view === 'days'\">\n        <div class=\"main-calendar-day-names\">\n          <span class=\"day-name-unit\" *ngFor=\"let name of dayNames\">{{ name }}</span>\n        </div>\n        <div class=\"main-calendar-days\">\n          <span class=\"day-unit\"\n                *ngFor=\"let day of days; let i = index;\"\n                (click)=\"day.isSelectable && setDate(i)\">\n            <span class=\"day-background-upper\"\n                  [ngClass]=\"this.getDayClasses(day)\">{{ day.isVisible ? day.day : '' }}</span>\n            <span class=\"day-background-lower\"\n                  [ngClass]=\"this.getDayClasses(day)\"></span>\n          </span>\n        </div>\n      </ng-container>\n      <div *ngIf=\"view === 'years'\">\n        <div class=\"main-calendar-years\" slimScroll [options]=\"scrollOptions\">\n          <span *ngFor=\"let year of years; let i = index;\"\n                class=\"year-unit\"\n                [ngClass]=\"{ 'is-selected': year.isThisYear }\"\n                (click)=\"setYear(i)\"\n          >\n            {{ year.year }}\n          </span>\n        </div>\n        </div>\n      <div *ngIf=\"view === 'months'\" class=\"main-calendar-months\">\n        <span *ngFor=\"let month of months; let i = index;\"\n              class=\"month-unit\"\n              [ngClass]=\"{ 'is-selected': month.isSelected}\"\n              (click)=\"setMonth(i)\"\n        >\n          {{ month.name }}\n        </span>\n      </div>\n    </div>\n  </div>\n</div>\n",
                providers: [
                    { provide: NG_VALUE_ACCESSOR, useExisting: forwardRef(() => NgxDatesPickerComponent_1), multi: true }
                ],
                styles: [".ngx-dates-picker-position-bottom-left{top:40px;right:0}.ngx-dates-picker-position-bottom-right{top:40px;left:0}.ngx-dates-picker-position-top-left{bottom:40px;right:0}.ngx-dates-picker-position-top-right{bottom:40px;left:0}.ngx-dates-picker-position-static{position:static!important}.ngx-dates-picker-container{position:relative}.ngx-dates-picker-input{padding:5px 10px;font-size:14px;width:200px;outline:0;border:1px solid #dfe3e9}.ngx-dates-picker-calendar-container{position:absolute;width:300px;background:#fff;box-shadow:0 1px 4px 0 rgba(0,0,0,.08);border:1px solid #dfe3e9;border-radius:4px}.topbar-container{width:100%;height:50px;padding:0 15px;border-bottom:1px solid #dfe3e9;display:flex;justify-content:space-between;align-items:center;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none}.topbar-container svg{cursor:pointer}.topbar-container svg g{fill:#ced0da}.topbar-container div{cursor:pointer}.topbar-title{color:#3d495c;font-size:14px;font-weight:600;cursor:pointer}.main-calendar-container{width:100%;height:100%;padding:15px 10px 0;font-size:12px;font-weight:500}.main-calendar-day-names{color:#cbcbcb;width:100%;display:flex;align-items:center}.day-name-unit{width:calc(100% / 7);text-transform:uppercase;text-align:center}.main-calendar-days,.main-calendar-years{padding:15px 0 0;width:100%;display:inline-block;overflow:hidden}.day-unit,.month-unit,.year-unit{position:relative;width:calc(100% / 7);font-size:14px;font-weight:400;height:40px;display:inline-flex;float:left;align-items:center;justify-content:center;cursor:pointer;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none}.day-background-upper{display:inline-flex;position:absolute;z-index:1;width:100%;height:100%;border-radius:50%;align-items:center;justify-content:center}.day-background-upper.is-selected{background:#0186ff;color:#fff}.day-background-upper:not(.is-visible){cursor:default}.day-background-upper.is-visible:hover{background:#f0f0f0;color:#000}.day-background-upper.is-visible.is-prev-month{color:#cbcbcb}.day-background-upper.is-visible.is-disabled{cursor:not-allowed;color:#cbcbcb}.day-background-lower{display:inline-flex;position:absolute;z-index:0;width:100%;height:100%;align-items:center;justify-content:center;border-top:2px solid #fff;border-bottom:2px solid #fff}.day-background-lower.is-in-range{background:rgba(1,134,255,.1)}.day-background-lower.range-start{border-bottom-left-radius:50%;border-top-left-radius:50%}.day-background-lower.range-end{border-bottom-right-radius:50%;border-top-right-radius:50%}.main-calendar-years{height:210px;display:block;padding:0}.month-unit{width:calc(100% / 4);height:54px}.year-unit{width:calc(100% / 3)}.month-unit,.year-unit{border-radius:10px}.month-unit.is-selected,.year-unit.is-selected{background:#0186ff;color:#fff}.month-unit:hover,.year-unit:hover{background:#f0f0f0;color:#000}.main-calendar-months{padding-bottom:10px;display:inline-block}"]
            }]
    }], function () { return []; }, { headless: [{
            type: Input
        }], isOpened: [{
            type: Input
        }], position: [{
            type: Input
        }], onBlur: [{
            type: HostListener,
            args: ['document:click', ['$event']]
        }], calendarContainerElement: [{
            type: ViewChild,
            args: ['container']
        }], inputElement: [{
            type: ViewChild,
            args: ['inputElement']
        }], options: [{
            type: Input
        }], previousMonthButtonTemplate: [{
            type: Input
        }], nextMonthButtonTemplate: [{
            type: Input
        }] }); })();
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(NgxDatesPickerModule, { declarations: function () { return [NgxDatesPickerComponent]; }, imports: function () { return [CommonModule, FormsModule, NgSlimScrollModule]; }, exports: function () { return [NgxDatesPickerComponent, CommonModule, FormsModule, NgSlimScrollModule]; } }); })();
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(NgxDatesPickerModule, [{
        type: NgModule,
        args: [{
                declarations: [NgxDatesPickerComponent],
                imports: [CommonModule, FormsModule, NgSlimScrollModule],
                exports: [NgxDatesPickerComponent, CommonModule, FormsModule, NgSlimScrollModule]
            }]
    }], null, null); })();

/**
 * Generated bundle index. Do not edit.
 */

export { NgxDatesPickerComponent, NgxDatesPickerModule, ɵ0 };

//# sourceMappingURL=ngx-dates-picker.js.map