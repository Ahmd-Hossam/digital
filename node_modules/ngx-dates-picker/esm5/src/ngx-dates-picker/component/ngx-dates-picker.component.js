import { __assign, __decorate } from "tslib";
import { Component, Input, HostListener, forwardRef, ViewChild } from '@angular/core';
import { NG_VALUE_ACCESSOR } from '@angular/forms';
import { startOfMonth, endOfMonth, addMonths, subMonths, setYear, eachDayOfInterval, getDate, getMonth, getYear, isToday, isSameMonth, format, getDay, subDays, setDay, isAfter, isBefore, addDays, setMonth, } from 'date-fns';
import { isSameDate, createDateRange } from '../helpers';
// Counter for calculating the auto-incrementing field ID
var counter = 0;
/**
 * Internal library helper that helps to check if value is empty
 * @param value
 */
var isNil = function (value) {
    return (typeof value === 'undefined') || (value === null);
};
var Éµ0 = isNil;
var NgxDatesPickerComponent = /** @class */ (function () {
    function NgxDatesPickerComponent() {
        var _this = this;
        /**
         * Disable datepicker's input
         */
        this.headless = false;
        /**
         * Set datepicker's visibility state
         */
        this.isOpened = false;
        /**
         * Datepicker dropdown position
         */
        this.position = 'bottom-right';
        this.currentOptions = {
            closeOnClickOutside: true,
            closeOnSelection: true,
            includeDays: 'previous-month',
            includeNextMonthsFirstFullWeek: false,
            minYear: 1970,
            maxYear: 2030,
            displayFormat: 'MMM dd, yyyy',
            barTitleFormat: 'MMMM yyyy',
            dayNamesFormat: 'EEE',
            rangeSeparator: '-',
            selectRange: false,
            firstCalendarDay: 0,
            barTitleIfEmpty: 'Click to select a date',
            locale: {},
            placeholder: '',
            addClass: {},
            addStyle: {},
            fieldId: this.defaultFieldId,
            useEmptyBarTitle: true,
        };
        this.onTouchedCallback = function () { };
        this.onChangeCallback = function () { };
        this.formatDay = function (date, isVisible) {
            if (isVisible === void 0) { isVisible = true; }
            return ({
                date: date,
                day: getDate(date),
                month: getMonth(date),
                year: getYear(date),
                inThisMonth: isSameMonth(date, _this.viewingDate),
                isToday: isVisible && isToday(date),
                isSelected: isVisible && _this.isDateSelected(date),
                isInRange: isVisible && _this.isInRange(date),
                isSelectable: isVisible && _this.isDateSelectable(date),
                isStart: isVisible && _this.isRangeBoundary(date, 'start'),
                isEnd: isVisible && _this.isRangeBoundary(date, 'end'),
                isVisible: isVisible,
            });
        };
        this.scrollOptions = {
            barBackground: '#DFE3E9',
            gridBackground: '#FFFFFF',
            barBorderRadius: '3',
            gridBorderRadius: '3',
            barWidth: '6',
            gridWidth: '6',
            barMargin: '0',
            gridMargin: '0'
        };
    }
    NgxDatesPickerComponent_1 = NgxDatesPickerComponent;
    NgxDatesPickerComponent.prototype.setDisabledState = function (isDisabled) {
        this.disabled = isDisabled;
    };
    Object.defineProperty(NgxDatesPickerComponent.prototype, "range", {
        get: function () {
            return this._range;
        },
        set: function (val) {
            this._range = val;
            this.onChangeCallback(this.getValueToEmit(val));
        },
        enumerable: true,
        configurable: true
    });
    NgxDatesPickerComponent.prototype.ngOnInit = function () {
        this.view = 'days';
        this.range = {
            start: new Date(),
            end: new Date(),
        };
        this.viewingDate = new Date();
        this.initDayNames();
        this.initYears();
        this.initMonths();
    };
    NgxDatesPickerComponent.prototype.ngOnChanges = function (changes) {
        if ('options' in changes) {
            this.updateOptions(changes.options.currentValue);
            this.initDayNames();
            this.init();
            this.initYears();
            this.initMonths();
        }
    };
    Object.defineProperty(NgxDatesPickerComponent.prototype, "defaultFieldId", {
        get: function () {
            // Only evaluate and increment if required
            var value = "datepicker-" + counter++;
            Object.defineProperty(this, 'defaultFieldId', { value: value });
            return value;
        },
        enumerable: true,
        configurable: true
    });
    NgxDatesPickerComponent.prototype.updateOptions = function (options) {
        this.currentOptions = __assign(__assign({}, this.currentOptions), options);
    };
    NgxDatesPickerComponent.prototype.nextMonth = function () {
        this.viewingDate = addMonths(this.viewingDate, 1);
        this.init();
    };
    NgxDatesPickerComponent.prototype.prevMonth = function () {
        this.viewingDate = subMonths(this.viewingDate, 1);
        this.init();
    };
    NgxDatesPickerComponent.prototype.setDate = function (i) {
        var date = this.days[i].date;
        if (this.currentOptions.selectRange) {
            if (!this.range.start && !this.range.end) {
                this.range.start = date;
            }
            else if (this.range.start && !this.range.end && isAfter(date, this.range.start)) {
                this.range.end = date;
            }
            else {
                this.range.end = undefined;
                this.range.start = date;
            }
        }
        else {
            this.range.start = this.range.end = date;
        }
        this.init();
        this.onChangeCallback(this.getValueToEmit(this.range));
        if (this.currentOptions.closeOnSelection && this.range.end) {
            this.close();
        }
    };
    NgxDatesPickerComponent.prototype.setYear = function (i) {
        this.viewingDate = setYear(this.viewingDate, this.years[i].year);
        this.init();
        this.initYears();
        this.view = 'months';
    };
    NgxDatesPickerComponent.prototype.setMonth = function (i) {
        this.viewingDate = setMonth(this.viewingDate, this.months[i].month);
        this.init();
        this.initMonths();
        this.view = 'days';
    };
    NgxDatesPickerComponent.prototype.init = function () {
        var _this = this;
        if (!this.viewingDate) {
            return;
        }
        var start = startOfMonth(this.viewingDate);
        var end = endOfMonth(this.viewingDate);
        this.days = eachDayOfInterval({ start: start, end: end }).map(function (date) { return _this.formatDay(date); });
        var firstMonthDay = getDay(start) - this.currentOptions.firstCalendarDay;
        var prevDays = firstMonthDay < 0 ? 7 - this.currentOptions.firstCalendarDay : firstMonthDay;
        var nextDays = (this.currentOptions.firstCalendarDay === 1 ? 7 : 6) - getDay(end);
        var showPrevMonthDays = this.currentOptions.includeDays === 'all' || this.currentOptions.includeDays === 'previous-month';
        var showNextMonthDays = this.currentOptions.includeDays === 'all' || this.currentOptions.includeDays === 'next-month';
        if (showNextMonthDays && this.currentOptions.includeNextMonthsFirstFullWeek) {
            nextDays += 7;
        }
        for (var i = 1; i <= prevDays; i++) {
            this.days.unshift(this.formatDay(subDays(start, i), showPrevMonthDays));
        }
        new Array(nextDays).fill(undefined)
            .forEach(function (_, i) { return _this.days.push(_this.formatDay(addDays(end, i + 1), showNextMonthDays)); });
        this.displayValue = this.formatDisplay();
        if (this.range) {
            this.barTitle = format(this.viewingDate, this.currentOptions.barTitleFormat, this.currentOptions.locale);
        }
        else {
            this.barTitle = this.currentOptions.useEmptyBarTitle ?
                this.currentOptions.barTitleIfEmpty :
                format(this.viewingDate, this.currentOptions.barTitleFormat, this.currentOptions.locale);
        }
    };
    NgxDatesPickerComponent.prototype.initYears = function () {
        var _this = this;
        var range = this.currentOptions.maxYear - this.currentOptions.minYear;
        this.years = Array.from(new Array(range), function (x, i) { return i + _this.currentOptions.minYear; }).map(function (year) {
            return { year: year, isThisYear: year === getYear(_this.viewingDate) };
        });
    };
    NgxDatesPickerComponent.prototype.initMonths = function () {
        var _this = this;
        this.months = Array.from(new Array(12), function (x, i) { return setMonth(new Date(), i + 1); })
            .map(function (date) {
            return { month: date.getMonth(), name: format(date, 'MMM'), isSelected: date.getMonth() === getMonth(_this.viewingDate) };
        });
    };
    NgxDatesPickerComponent.prototype.initDayNames = function () {
        this.dayNames = [];
        var start = this.currentOptions.firstCalendarDay;
        for (var i = start; i <= 6 + start; i++) {
            var date = setDay(new Date(), i);
            this.dayNames.push(format(date, this.currentOptions.dayNamesFormat, this.currentOptions.locale));
        }
    };
    NgxDatesPickerComponent.prototype.toggleView = function () {
        this.view = this.view === 'days' ? 'years' : 'days';
    };
    NgxDatesPickerComponent.prototype.toggle = function () {
        this.isOpened = !this.isOpened;
        if (!this.isOpened && this.view === 'years') {
            this.toggleView();
        }
    };
    NgxDatesPickerComponent.prototype.close = function () {
        this.isOpened = false;
        if (this.view === 'years') {
            this.toggleView();
        }
    };
    NgxDatesPickerComponent.prototype.reset = function () {
        this.range = {
            start: new Date(),
            end: new Date(),
        };
        this.init();
    };
    NgxDatesPickerComponent.prototype.writeValue = function (val) {
        if (val) {
            if (typeof val === 'string') {
                this.range.start = this.range.end = new Date(val);
            }
            else if (val instanceof Date) {
                this.range.start = this.range.end = val;
            }
            else if (val.start) { // Checking if it's instance of DateRange
                this.range = val;
            }
            else {
                throw Error('Invalid input data type');
            }
            this.viewingDate = this.range.start || this.viewingDate;
            this.init();
        }
    };
    NgxDatesPickerComponent.prototype.registerOnChange = function (fn) {
        this.onChangeCallback = fn;
    };
    NgxDatesPickerComponent.prototype.registerOnTouched = function (fn) {
        this.onTouchedCallback = fn;
    };
    NgxDatesPickerComponent.prototype.onBlur = function (e) {
        if (!this.isOpened || !this.currentOptions.closeOnClickOutside) {
            return;
        }
        if (this.inputElement == null) {
            return;
        }
        if (e.target === this.inputElement.nativeElement ||
            this.inputElement.nativeElement.contains(e.target) ||
            (e.target.parentElement && e.target.parentElement.classList.contains('day-unit'))) {
            return;
        }
        if (this.calendarContainerElement.nativeElement !== e.target &&
            !this.calendarContainerElement.nativeElement.contains(e.target) &&
            !e.target.classList.contains('year-unit') &&
            !e.target.classList.contains('month-unit')) {
            this.close();
        }
    };
    NgxDatesPickerComponent.prototype.getDayClasses = function (day) {
        return {
            'is-prev-month': !day.inThisMonth,
            'is-today': day.isToday,
            'is-selected': day.isSelected,
            'is-in-range': day.isInRange,
            'is-disabled': !day.isSelectable,
            'range-start': day.isStart,
            'range-end': day.isEnd,
            'is-visible': day.isVisible,
        };
    };
    /**
     * Checks if specified date is in range of min and max dates
     * @param date
     */
    NgxDatesPickerComponent.prototype.isDateSelectable = function (date) {
        var minDateSet = !isNil(this.currentOptions.minDate);
        var maxDateSet = !isNil(this.currentOptions.maxDate);
        var timestamp = date.valueOf();
        return (!(minDateSet && timestamp < this.currentOptions.minDate.valueOf()) ||
            (!(maxDateSet && timestamp > this.currentOptions.maxDate.valueOf())));
    };
    NgxDatesPickerComponent.prototype.isDateSelected = function (date) {
        return isSameDate(date, this.range.start) || isSameDate(date, this.range.end);
    };
    NgxDatesPickerComponent.prototype.isInRange = function (date) {
        return this.isDateSelected(date) || (isAfter(date, this.range.start) && isBefore(date, this.range.end));
    };
    NgxDatesPickerComponent.prototype.formatDisplay = function () {
        if (!this.range) {
            return '';
        }
        var formattedStartDate = format(this.range.start, this.currentOptions.displayFormat, this.currentOptions.locale);
        if (this.currentOptions.selectRange) {
            var formattedEndDate = format(this.range.end || this.range.start, this.currentOptions.displayFormat, this.currentOptions.locale);
            return "" + formattedStartDate + this.currentOptions.rangeSeparator + formattedEndDate;
        }
        return formattedStartDate;
    };
    NgxDatesPickerComponent.prototype.isRangeBoundary = function (date, boundary) {
        return !this.range[boundary] || isSameDate(date, this.range[boundary]);
    };
    NgxDatesPickerComponent.prototype.getValueToEmit = function (range) {
        if (!this.currentOptions.selectRange) {
            return new Date(range.start.getTime());
        }
        if (range.end) {
            return createDateRange(range.start, range.end);
        }
        return createDateRange(range.start, range.start);
    };
    var NgxDatesPickerComponent_1;
    __decorate([
        ViewChild('container')
    ], NgxDatesPickerComponent.prototype, "calendarContainerElement", void 0);
    __decorate([
        ViewChild('inputElement')
    ], NgxDatesPickerComponent.prototype, "inputElement", void 0);
    __decorate([
        Input()
    ], NgxDatesPickerComponent.prototype, "options", void 0);
    __decorate([
        Input()
    ], NgxDatesPickerComponent.prototype, "headless", void 0);
    __decorate([
        Input()
    ], NgxDatesPickerComponent.prototype, "isOpened", void 0);
    __decorate([
        Input()
    ], NgxDatesPickerComponent.prototype, "position", void 0);
    __decorate([
        Input()
    ], NgxDatesPickerComponent.prototype, "previousMonthButtonTemplate", void 0);
    __decorate([
        Input()
    ], NgxDatesPickerComponent.prototype, "nextMonthButtonTemplate", void 0);
    __decorate([
        HostListener('document:click', ['$event'])
    ], NgxDatesPickerComponent.prototype, "onBlur", null);
    NgxDatesPickerComponent = NgxDatesPickerComponent_1 = __decorate([
        Component({
            selector: 'ngx-dates-picker',
            template: "<div class=\"ngx-dates-picker-container\">\n  <input *ngIf=\"!headless\"\n         #inputElement\n         type=\"text\"\n         class=\"ngx-dates-picker-input\"\n         [(ngModel)]=\"displayValue\"\n         readonly\n         [placeholder]=\"currentOptions.placeholder\"\n         [ngClass]=\"currentOptions.addClass\"\n         [ngStyle]=\"currentOptions.addStyle\"\n         [id]=\"fieldId\"\n         [disabled]=\"disabled\"\n         (click)=\"toggle()\" />\n  <ng-content></ng-content>\n  <div class=\"ngx-dates-picker-calendar-container ngx-dates-picker-position-{{position}}\"\n       *ngIf=\"isOpened\"\n       #container>\n    <div class=\"topbar-container\">\n      <div (click)=\"prevMonth()\">\n        <ng-template [ngTemplateOutlet]=\"previousMonthButtonTemplate || defaultPreviousMonthTemplate\"></ng-template>\n      </div>\n      <ng-template #defaultPreviousMonthTemplate>\n        <svg width=\"7px\"\n             height=\"10px\"\n             viewBox=\"0 0 7 10\"\n             version=\"1.1\"\n             xmlns=\"http://www.w3.org/2000/svg\"\n             xmlns:xlink=\"http://www.w3.org/1999/xlink\">\n          <g stroke=\"none\" stroke-width=\"1\" fill=\"none\" fill-rule=\"evenodd\">\n            <g transform=\"translate(-923.000000, -1882.000000)\" fill=\"#CED0DA\">\n              <g transform=\"translate(80.000000, 1361.000000)\">\n                <g transform=\"translate(0.000000, 430.000000)\">\n                  <g transform=\"translate(825.000000, 0.000000)\">\n                    <g transform=\"translate(0.000000, 72.000000)\">\n                      <g transform=\"translate(18.000000, 15.000000)\">\n                        <polygon id=\"Back\" points=\"6.015 4 0 9.013 6.015 14.025\"></polygon>\n                      </g>\n                    </g>\n                  </g>\n                </g>\n              </g>\n            </g>\n          </g>\n        </svg>\n      </ng-template>\n      <span class=\"topbar-title\" (click)=\"toggleView()\">{{ barTitle }}</span>\n      <div (click)=\"nextMonth()\">\n        <ng-template [ngTemplateOutlet]=\"nextMonthButtonTemplate || defaultNextMonthTemplate\"></ng-template>\n      </div>\n      <ng-template #defaultNextMonthTemplate>\n        <svg width=\"7px\"\n             height=\"10px\"\n             viewBox=\"0 0 6 10\"\n             version=\"1.1\"\n             xmlns=\"http://www.w3.org/2000/svg\"\n             xmlns:xlink=\"http://www.w3.org/1999/xlink\">\n          <g id=\"Source-Sans---UI-Elements-Kit\" stroke=\"none\" stroke-width=\"1\" fill=\"none\" fill-rule=\"evenodd\">\n            <g id=\"White-Layout\" transform=\"translate(-1182.000000, -1882.000000)\" fill=\"#CED0DA\">\n              <g id=\"Dropdowns-&amp;-Selector\" transform=\"translate(80.000000, 1361.000000)\">\n                <g id=\"Dropdowns\" transform=\"translate(0.000000, 430.000000)\">\n                  <g id=\"Calendar\" transform=\"translate(825.000000, 0.000000)\">\n                    <g transform=\"translate(0.000000, 72.000000)\" id=\"Top-Bar-Nav\">\n                      <g transform=\"translate(18.000000, 15.000000)\">\n                        <polygon id=\"Forward\"\n                                 transform=\"translate(262.007500, 9.012500) scale(-1, 1) translate(-262.007500, -9.012500) \"\n                                 points=\"265.015 4 259 9.013 265.015 14.025\">\n                        </polygon>\n                      </g>\n                    </g>\n                  </g>\n                </g>\n              </g>\n            </g>\n          </g>\n        </svg>\n      </ng-template>\n    </div>\n    <div class=\"main-calendar-container\">\n      <ng-container *ngIf=\"view === 'days'\">\n        <div class=\"main-calendar-day-names\">\n          <span class=\"day-name-unit\" *ngFor=\"let name of dayNames\">{{ name }}</span>\n        </div>\n        <div class=\"main-calendar-days\">\n          <span class=\"day-unit\"\n                *ngFor=\"let day of days; let i = index;\"\n                (click)=\"day.isSelectable && setDate(i)\">\n            <span class=\"day-background-upper\"\n                  [ngClass]=\"this.getDayClasses(day)\">{{ day.isVisible ? day.day : '' }}</span>\n            <span class=\"day-background-lower\"\n                  [ngClass]=\"this.getDayClasses(day)\"></span>\n          </span>\n        </div>\n      </ng-container>\n      <div *ngIf=\"view === 'years'\">\n        <div class=\"main-calendar-years\" slimScroll [options]=\"scrollOptions\">\n          <span *ngFor=\"let year of years; let i = index;\"\n                class=\"year-unit\"\n                [ngClass]=\"{ 'is-selected': year.isThisYear }\"\n                (click)=\"setYear(i)\"\n          >\n            {{ year.year }}\n          </span>\n        </div>\n        </div>\n      <div *ngIf=\"view === 'months'\" class=\"main-calendar-months\">\n        <span *ngFor=\"let month of months; let i = index;\"\n              class=\"month-unit\"\n              [ngClass]=\"{ 'is-selected': month.isSelected}\"\n              (click)=\"setMonth(i)\"\n        >\n          {{ month.name }}\n        </span>\n      </div>\n    </div>\n  </div>\n</div>\n",
            providers: [
                { provide: NG_VALUE_ACCESSOR, useExisting: forwardRef(function () { return NgxDatesPickerComponent_1; }), multi: true }
            ],
            styles: [".ngx-dates-picker-position-bottom-left{top:40px;right:0}.ngx-dates-picker-position-bottom-right{top:40px;left:0}.ngx-dates-picker-position-top-left{bottom:40px;right:0}.ngx-dates-picker-position-top-right{bottom:40px;left:0}.ngx-dates-picker-position-static{position:static!important}.ngx-dates-picker-container{position:relative}.ngx-dates-picker-input{padding:5px 10px;font-size:14px;width:200px;outline:0;border:1px solid #dfe3e9}.ngx-dates-picker-calendar-container{position:absolute;width:300px;background:#fff;box-shadow:0 1px 4px 0 rgba(0,0,0,.08);border:1px solid #dfe3e9;border-radius:4px}.topbar-container{width:100%;height:50px;padding:0 15px;border-bottom:1px solid #dfe3e9;display:flex;justify-content:space-between;align-items:center;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none}.topbar-container svg{cursor:pointer}.topbar-container svg g{fill:#ced0da}.topbar-container div{cursor:pointer}.topbar-title{color:#3d495c;font-size:14px;font-weight:600;cursor:pointer}.main-calendar-container{width:100%;height:100%;padding:15px 10px 0;font-size:12px;font-weight:500}.main-calendar-day-names{color:#cbcbcb;width:100%;display:flex;align-items:center}.day-name-unit{width:calc(100% / 7);text-transform:uppercase;text-align:center}.main-calendar-days,.main-calendar-years{padding:15px 0 0;width:100%;display:inline-block;overflow:hidden}.day-unit,.month-unit,.year-unit{position:relative;width:calc(100% / 7);font-size:14px;font-weight:400;height:40px;display:inline-flex;float:left;align-items:center;justify-content:center;cursor:pointer;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none}.day-background-upper{display:inline-flex;position:absolute;z-index:1;width:100%;height:100%;border-radius:50%;align-items:center;justify-content:center}.day-background-upper.is-selected{background:#0186ff;color:#fff}.day-background-upper:not(.is-visible){cursor:default}.day-background-upper.is-visible:hover{background:#f0f0f0;color:#000}.day-background-upper.is-visible.is-prev-month{color:#cbcbcb}.day-background-upper.is-visible.is-disabled{cursor:not-allowed;color:#cbcbcb}.day-background-lower{display:inline-flex;position:absolute;z-index:0;width:100%;height:100%;align-items:center;justify-content:center;border-top:2px solid #fff;border-bottom:2px solid #fff}.day-background-lower.is-in-range{background:rgba(1,134,255,.1)}.day-background-lower.range-start{border-bottom-left-radius:50%;border-top-left-radius:50%}.day-background-lower.range-end{border-bottom-right-radius:50%;border-top-right-radius:50%}.main-calendar-years{height:210px;display:block;padding:0}.month-unit{width:calc(100% / 4);height:54px}.year-unit{width:calc(100% / 3)}.month-unit,.year-unit{border-radius:10px}.month-unit.is-selected,.year-unit.is-selected{background:#0186ff;color:#fff}.month-unit:hover,.year-unit:hover{background:#f0f0f0;color:#000}.main-calendar-months{padding-bottom:10px;display:inline-block}"]
        })
    ], NgxDatesPickerComponent);
    return NgxDatesPickerComponent;
}());
export { NgxDatesPickerComponent };
export { Éµ0 };
//# sourceMappingURL=data:application/json;base64,