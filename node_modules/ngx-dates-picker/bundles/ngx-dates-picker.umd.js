(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('@angular/common'), require('@angular/forms'), require('ngx-slimscroll'), require('date-fns')) :
    typeof define === 'function' && define.amd ? define('ngx-dates-picker', ['exports', '@angular/core', '@angular/common', '@angular/forms', 'ngx-slimscroll', 'date-fns'], factory) :
    (global = global || self, factory(global['ngx-dates-picker'] = {}, global.ng.core, global.ng.common, global.ng.forms, global.ngxSlimscroll, global.dateFns));
}(this, (function (exports, core, common, forms, ngxSlimscroll, dateFns) { 'use strict';

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation.

    Permission to use, copy, modify, and/or distribute this software for any
    purpose with or without fee is hereby granted.

    THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
    REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
    AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
    INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
    LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
    OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
    PERFORMANCE OF THIS SOFTWARE.
    ***************************************************************************** */
    /* global Reflect, Promise */

    var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };

    function __extends(d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    }

    var __assign = function() {
        __assign = Object.assign || function __assign(t) {
            for (var s, i = 1, n = arguments.length; i < n; i++) {
                s = arguments[i];
                for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
            }
            return t;
        };
        return __assign.apply(this, arguments);
    };

    function __rest(s, e) {
        var t = {};
        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
            t[p] = s[p];
        if (s != null && typeof Object.getOwnPropertySymbols === "function")
            for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
                if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                    t[p[i]] = s[p[i]];
            }
        return t;
    }

    function __decorate(decorators, target, key, desc) {
        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
        else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    }

    function __param(paramIndex, decorator) {
        return function (target, key) { decorator(target, key, paramIndex); }
    }

    function __metadata(metadataKey, metadataValue) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(metadataKey, metadataValue);
    }

    function __awaiter(thisArg, _arguments, P, generator) {
        function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
        return new (P || (P = Promise))(function (resolve, reject) {
            function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
            function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
            function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
            step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
    }

    function __generator(thisArg, body) {
        var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
        return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
        function verb(n) { return function (v) { return step([n, v]); }; }
        function step(op) {
            if (f) throw new TypeError("Generator is already executing.");
            while (_) try {
                if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
                if (y = 0, t) op = [op[0] & 2, t.value];
                switch (op[0]) {
                    case 0: case 1: t = op; break;
                    case 4: _.label++; return { value: op[1], done: false };
                    case 5: _.label++; y = op[1]; op = [0]; continue;
                    case 7: op = _.ops.pop(); _.trys.pop(); continue;
                    default:
                        if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                        if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                        if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                        if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                        if (t[2]) _.ops.pop();
                        _.trys.pop(); continue;
                }
                op = body.call(thisArg, _);
            } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
            if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
        }
    }

    function __createBinding(o, m, k, k2) {
        if (k2 === undefined) k2 = k;
        o[k2] = m[k];
    }

    function __exportStar(m, exports) {
        for (var p in m) if (p !== "default" && !exports.hasOwnProperty(p)) exports[p] = m[p];
    }

    function __values(o) {
        var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
        if (m) return m.call(o);
        if (o && typeof o.length === "number") return {
            next: function () {
                if (o && i >= o.length) o = void 0;
                return { value: o && o[i++], done: !o };
            }
        };
        throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
    }

    function __read(o, n) {
        var m = typeof Symbol === "function" && o[Symbol.iterator];
        if (!m) return o;
        var i = m.call(o), r, ar = [], e;
        try {
            while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
        }
        catch (error) { e = { error: error }; }
        finally {
            try {
                if (r && !r.done && (m = i["return"])) m.call(i);
            }
            finally { if (e) throw e.error; }
        }
        return ar;
    }

    function __spread() {
        for (var ar = [], i = 0; i < arguments.length; i++)
            ar = ar.concat(__read(arguments[i]));
        return ar;
    }

    function __spreadArrays() {
        for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
        for (var r = Array(s), k = 0, i = 0; i < il; i++)
            for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
                r[k] = a[j];
        return r;
    };

    function __await(v) {
        return this instanceof __await ? (this.v = v, this) : new __await(v);
    }

    function __asyncGenerator(thisArg, _arguments, generator) {
        if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
        var g = generator.apply(thisArg, _arguments || []), i, q = [];
        return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i;
        function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }
        function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }
        function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }
        function fulfill(value) { resume("next", value); }
        function reject(value) { resume("throw", value); }
        function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }
    }

    function __asyncDelegator(o) {
        var i, p;
        return i = {}, verb("next"), verb("throw", function (e) { throw e; }), verb("return"), i[Symbol.iterator] = function () { return this; }, i;
        function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === "return" } : f ? f(v) : v; } : f; }
    }

    function __asyncValues(o) {
        if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
        var m = o[Symbol.asyncIterator], i;
        return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i);
        function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }
        function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }
    }

    function __makeTemplateObject(cooked, raw) {
        if (Object.defineProperty) { Object.defineProperty(cooked, "raw", { value: raw }); } else { cooked.raw = raw; }
        return cooked;
    };

    function __importStar(mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
        result.default = mod;
        return result;
    }

    function __importDefault(mod) {
        return (mod && mod.__esModule) ? mod : { default: mod };
    }

    function __classPrivateFieldGet(receiver, privateMap) {
        if (!privateMap.has(receiver)) {
            throw new TypeError("attempted to get private field on non-instance");
        }
        return privateMap.get(receiver);
    }

    function __classPrivateFieldSet(receiver, privateMap, value) {
        if (!privateMap.has(receiver)) {
            throw new TypeError("attempted to set private field on non-instance");
        }
        privateMap.set(receiver, value);
        return value;
    }

    var isSameDate = function (date, current) { return (dateFns.isSameDay(date, current) && dateFns.isSameMonth(date, current) && dateFns.isSameYear(date, current)); };

    var createDateRange = function (start, end) { return ({
        start: new Date(start.getTime()),
        end: new Date(end.getTime()),
    }); };

    // Counter for calculating the auto-incrementing field ID
    var counter = 0;
    /**
     * Internal library helper that helps to check if value is empty
     * @param value
     */
    var isNil = function (value) {
        return (typeof value === 'undefined') || (value === null);
    };
    var ɵ0 = isNil;
    var NgxDatesPickerComponent = /** @class */ (function () {
        function NgxDatesPickerComponent() {
            var _this = this;
            /**
             * Disable datepicker's input
             */
            this.headless = false;
            /**
             * Set datepicker's visibility state
             */
            this.isOpened = false;
            /**
             * Datepicker dropdown position
             */
            this.position = 'bottom-right';
            this.currentOptions = {
                closeOnClickOutside: true,
                closeOnSelection: true,
                includeDays: 'previous-month',
                includeNextMonthsFirstFullWeek: false,
                minYear: 1970,
                maxYear: 2030,
                displayFormat: 'MMM dd, yyyy',
                barTitleFormat: 'MMMM yyyy',
                dayNamesFormat: 'EEE',
                rangeSeparator: '-',
                selectRange: false,
                firstCalendarDay: 0,
                barTitleIfEmpty: 'Click to select a date',
                locale: {},
                placeholder: '',
                addClass: {},
                addStyle: {},
                fieldId: this.defaultFieldId,
                useEmptyBarTitle: true,
            };
            this.onTouchedCallback = function () { };
            this.onChangeCallback = function () { };
            this.formatDay = function (date, isVisible) {
                if (isVisible === void 0) { isVisible = true; }
                return ({
                    date: date,
                    day: dateFns.getDate(date),
                    month: dateFns.getMonth(date),
                    year: dateFns.getYear(date),
                    inThisMonth: dateFns.isSameMonth(date, _this.viewingDate),
                    isToday: isVisible && dateFns.isToday(date),
                    isSelected: isVisible && _this.isDateSelected(date),
                    isInRange: isVisible && _this.isInRange(date),
                    isSelectable: isVisible && _this.isDateSelectable(date),
                    isStart: isVisible && _this.isRangeBoundary(date, 'start'),
                    isEnd: isVisible && _this.isRangeBoundary(date, 'end'),
                    isVisible: isVisible,
                });
            };
            this.scrollOptions = {
                barBackground: '#DFE3E9',
                gridBackground: '#FFFFFF',
                barBorderRadius: '3',
                gridBorderRadius: '3',
                barWidth: '6',
                gridWidth: '6',
                barMargin: '0',
                gridMargin: '0'
            };
        }
        NgxDatesPickerComponent_1 = NgxDatesPickerComponent;
        NgxDatesPickerComponent.prototype.setDisabledState = function (isDisabled) {
            this.disabled = isDisabled;
        };
        Object.defineProperty(NgxDatesPickerComponent.prototype, "range", {
            get: function () {
                return this._range;
            },
            set: function (val) {
                this._range = val;
                this.onChangeCallback(this.getValueToEmit(val));
            },
            enumerable: true,
            configurable: true
        });
        NgxDatesPickerComponent.prototype.ngOnInit = function () {
            this.view = 'days';
            this.range = {
                start: new Date(),
                end: new Date(),
            };
            this.viewingDate = new Date();
            this.initDayNames();
            this.initYears();
            this.initMonths();
        };
        NgxDatesPickerComponent.prototype.ngOnChanges = function (changes) {
            if ('options' in changes) {
                this.updateOptions(changes.options.currentValue);
                this.initDayNames();
                this.init();
                this.initYears();
                this.initMonths();
            }
        };
        Object.defineProperty(NgxDatesPickerComponent.prototype, "defaultFieldId", {
            get: function () {
                // Only evaluate and increment if required
                var value = "datepicker-" + counter++;
                Object.defineProperty(this, 'defaultFieldId', { value: value });
                return value;
            },
            enumerable: true,
            configurable: true
        });
        NgxDatesPickerComponent.prototype.updateOptions = function (options) {
            this.currentOptions = __assign(__assign({}, this.currentOptions), options);
        };
        NgxDatesPickerComponent.prototype.nextMonth = function () {
            this.viewingDate = dateFns.addMonths(this.viewingDate, 1);
            this.init();
        };
        NgxDatesPickerComponent.prototype.prevMonth = function () {
            this.viewingDate = dateFns.subMonths(this.viewingDate, 1);
            this.init();
        };
        NgxDatesPickerComponent.prototype.setDate = function (i) {
            var date = this.days[i].date;
            if (this.currentOptions.selectRange) {
                if (!this.range.start && !this.range.end) {
                    this.range.start = date;
                }
                else if (this.range.start && !this.range.end && dateFns.isAfter(date, this.range.start)) {
                    this.range.end = date;
                }
                else {
                    this.range.end = undefined;
                    this.range.start = date;
                }
            }
            else {
                this.range.start = this.range.end = date;
            }
            this.init();
            this.onChangeCallback(this.getValueToEmit(this.range));
            if (this.currentOptions.closeOnSelection && this.range.end) {
                this.close();
            }
        };
        NgxDatesPickerComponent.prototype.setYear = function (i) {
            this.viewingDate = dateFns.setYear(this.viewingDate, this.years[i].year);
            this.init();
            this.initYears();
            this.view = 'months';
        };
        NgxDatesPickerComponent.prototype.setMonth = function (i) {
            this.viewingDate = dateFns.setMonth(this.viewingDate, this.months[i].month);
            this.init();
            this.initMonths();
            this.view = 'days';
        };
        NgxDatesPickerComponent.prototype.init = function () {
            var _this = this;
            if (!this.viewingDate) {
                return;
            }
            var start = dateFns.startOfMonth(this.viewingDate);
            var end = dateFns.endOfMonth(this.viewingDate);
            this.days = dateFns.eachDayOfInterval({ start: start, end: end }).map(function (date) { return _this.formatDay(date); });
            var firstMonthDay = dateFns.getDay(start) - this.currentOptions.firstCalendarDay;
            var prevDays = firstMonthDay < 0 ? 7 - this.currentOptions.firstCalendarDay : firstMonthDay;
            var nextDays = (this.currentOptions.firstCalendarDay === 1 ? 7 : 6) - dateFns.getDay(end);
            var showPrevMonthDays = this.currentOptions.includeDays === 'all' || this.currentOptions.includeDays === 'previous-month';
            var showNextMonthDays = this.currentOptions.includeDays === 'all' || this.currentOptions.includeDays === 'next-month';
            if (showNextMonthDays && this.currentOptions.includeNextMonthsFirstFullWeek) {
                nextDays += 7;
            }
            for (var i = 1; i <= prevDays; i++) {
                this.days.unshift(this.formatDay(dateFns.subDays(start, i), showPrevMonthDays));
            }
            new Array(nextDays).fill(undefined)
                .forEach(function (_, i) { return _this.days.push(_this.formatDay(dateFns.addDays(end, i + 1), showNextMonthDays)); });
            this.displayValue = this.formatDisplay();
            if (this.range) {
                this.barTitle = dateFns.format(this.viewingDate, this.currentOptions.barTitleFormat, this.currentOptions.locale);
            }
            else {
                this.barTitle = this.currentOptions.useEmptyBarTitle ?
                    this.currentOptions.barTitleIfEmpty :
                    dateFns.format(this.viewingDate, this.currentOptions.barTitleFormat, this.currentOptions.locale);
            }
        };
        NgxDatesPickerComponent.prototype.initYears = function () {
            var _this = this;
            var range = this.currentOptions.maxYear - this.currentOptions.minYear;
            this.years = Array.from(new Array(range), function (x, i) { return i + _this.currentOptions.minYear; }).map(function (year) {
                return { year: year, isThisYear: year === dateFns.getYear(_this.viewingDate) };
            });
        };
        NgxDatesPickerComponent.prototype.initMonths = function () {
            var _this = this;
            this.months = Array.from(new Array(12), function (x, i) { return dateFns.setMonth(new Date(), i + 1); })
                .map(function (date) {
                return { month: date.getMonth(), name: dateFns.format(date, 'MMM'), isSelected: date.getMonth() === dateFns.getMonth(_this.viewingDate) };
            });
        };
        NgxDatesPickerComponent.prototype.initDayNames = function () {
            this.dayNames = [];
            var start = this.currentOptions.firstCalendarDay;
            for (var i = start; i <= 6 + start; i++) {
                var date = dateFns.setDay(new Date(), i);
                this.dayNames.push(dateFns.format(date, this.currentOptions.dayNamesFormat, this.currentOptions.locale));
            }
        };
        NgxDatesPickerComponent.prototype.toggleView = function () {
            this.view = this.view === 'days' ? 'years' : 'days';
        };
        NgxDatesPickerComponent.prototype.toggle = function () {
            this.isOpened = !this.isOpened;
            if (!this.isOpened && this.view === 'years') {
                this.toggleView();
            }
        };
        NgxDatesPickerComponent.prototype.close = function () {
            this.isOpened = false;
            if (this.view === 'years') {
                this.toggleView();
            }
        };
        NgxDatesPickerComponent.prototype.reset = function () {
            this.range = {
                start: new Date(),
                end: new Date(),
            };
            this.init();
        };
        NgxDatesPickerComponent.prototype.writeValue = function (val) {
            if (val) {
                if (typeof val === 'string') {
                    this.range.start = this.range.end = new Date(val);
                }
                else if (val instanceof Date) {
                    this.range.start = this.range.end = val;
                }
                else if (val.start) { // Checking if it's instance of DateRange
                    this.range = val;
                }
                else {
                    throw Error('Invalid input data type');
                }
                this.viewingDate = this.range.start || this.viewingDate;
                this.init();
            }
        };
        NgxDatesPickerComponent.prototype.registerOnChange = function (fn) {
            this.onChangeCallback = fn;
        };
        NgxDatesPickerComponent.prototype.registerOnTouched = function (fn) {
            this.onTouchedCallback = fn;
        };
        NgxDatesPickerComponent.prototype.onBlur = function (e) {
            if (!this.isOpened || !this.currentOptions.closeOnClickOutside) {
                return;
            }
            if (this.inputElement == null) {
                return;
            }
            if (e.target === this.inputElement.nativeElement ||
                this.inputElement.nativeElement.contains(e.target) ||
                (e.target.parentElement && e.target.parentElement.classList.contains('day-unit'))) {
                return;
            }
            if (this.calendarContainerElement.nativeElement !== e.target &&
                !this.calendarContainerElement.nativeElement.contains(e.target) &&
                !e.target.classList.contains('year-unit') &&
                !e.target.classList.contains('month-unit')) {
                this.close();
            }
        };
        NgxDatesPickerComponent.prototype.getDayClasses = function (day) {
            return {
                'is-prev-month': !day.inThisMonth,
                'is-today': day.isToday,
                'is-selected': day.isSelected,
                'is-in-range': day.isInRange,
                'is-disabled': !day.isSelectable,
                'range-start': day.isStart,
                'range-end': day.isEnd,
                'is-visible': day.isVisible,
            };
        };
        /**
         * Checks if specified date is in range of min and max dates
         * @param date
         */
        NgxDatesPickerComponent.prototype.isDateSelectable = function (date) {
            var minDateSet = !isNil(this.currentOptions.minDate);
            var maxDateSet = !isNil(this.currentOptions.maxDate);
            var timestamp = date.valueOf();
            return (!(minDateSet && timestamp < this.currentOptions.minDate.valueOf()) ||
                (!(maxDateSet && timestamp > this.currentOptions.maxDate.valueOf())));
        };
        NgxDatesPickerComponent.prototype.isDateSelected = function (date) {
            return isSameDate(date, this.range.start) || isSameDate(date, this.range.end);
        };
        NgxDatesPickerComponent.prototype.isInRange = function (date) {
            return this.isDateSelected(date) || (dateFns.isAfter(date, this.range.start) && dateFns.isBefore(date, this.range.end));
        };
        NgxDatesPickerComponent.prototype.formatDisplay = function () {
            if (!this.range) {
                return '';
            }
            var formattedStartDate = dateFns.format(this.range.start, this.currentOptions.displayFormat, this.currentOptions.locale);
            if (this.currentOptions.selectRange) {
                var formattedEndDate = dateFns.format(this.range.end || this.range.start, this.currentOptions.displayFormat, this.currentOptions.locale);
                return "" + formattedStartDate + this.currentOptions.rangeSeparator + formattedEndDate;
            }
            return formattedStartDate;
        };
        NgxDatesPickerComponent.prototype.isRangeBoundary = function (date, boundary) {
            return !this.range[boundary] || isSameDate(date, this.range[boundary]);
        };
        NgxDatesPickerComponent.prototype.getValueToEmit = function (range) {
            if (!this.currentOptions.selectRange) {
                return new Date(range.start.getTime());
            }
            if (range.end) {
                return createDateRange(range.start, range.end);
            }
            return createDateRange(range.start, range.start);
        };
        var NgxDatesPickerComponent_1;
        __decorate([
            core.ViewChild('container')
        ], NgxDatesPickerComponent.prototype, "calendarContainerElement", void 0);
        __decorate([
            core.ViewChild('inputElement')
        ], NgxDatesPickerComponent.prototype, "inputElement", void 0);
        __decorate([
            core.Input()
        ], NgxDatesPickerComponent.prototype, "options", void 0);
        __decorate([
            core.Input()
        ], NgxDatesPickerComponent.prototype, "headless", void 0);
        __decorate([
            core.Input()
        ], NgxDatesPickerComponent.prototype, "isOpened", void 0);
        __decorate([
            core.Input()
        ], NgxDatesPickerComponent.prototype, "position", void 0);
        __decorate([
            core.Input()
        ], NgxDatesPickerComponent.prototype, "previousMonthButtonTemplate", void 0);
        __decorate([
            core.Input()
        ], NgxDatesPickerComponent.prototype, "nextMonthButtonTemplate", void 0);
        __decorate([
            core.HostListener('document:click', ['$event'])
        ], NgxDatesPickerComponent.prototype, "onBlur", null);
        NgxDatesPickerComponent = NgxDatesPickerComponent_1 = __decorate([
            core.Component({
                selector: 'ngx-dates-picker',
                template: "<div class=\"ngx-dates-picker-container\">\n  <input *ngIf=\"!headless\"\n         #inputElement\n         type=\"text\"\n         class=\"ngx-dates-picker-input\"\n         [(ngModel)]=\"displayValue\"\n         readonly\n         [placeholder]=\"currentOptions.placeholder\"\n         [ngClass]=\"currentOptions.addClass\"\n         [ngStyle]=\"currentOptions.addStyle\"\n         [id]=\"fieldId\"\n         [disabled]=\"disabled\"\n         (click)=\"toggle()\" />\n  <ng-content></ng-content>\n  <div class=\"ngx-dates-picker-calendar-container ngx-dates-picker-position-{{position}}\"\n       *ngIf=\"isOpened\"\n       #container>\n    <div class=\"topbar-container\">\n      <div (click)=\"prevMonth()\">\n        <ng-template [ngTemplateOutlet]=\"previousMonthButtonTemplate || defaultPreviousMonthTemplate\"></ng-template>\n      </div>\n      <ng-template #defaultPreviousMonthTemplate>\n        <svg width=\"7px\"\n             height=\"10px\"\n             viewBox=\"0 0 7 10\"\n             version=\"1.1\"\n             xmlns=\"http://www.w3.org/2000/svg\"\n             xmlns:xlink=\"http://www.w3.org/1999/xlink\">\n          <g stroke=\"none\" stroke-width=\"1\" fill=\"none\" fill-rule=\"evenodd\">\n            <g transform=\"translate(-923.000000, -1882.000000)\" fill=\"#CED0DA\">\n              <g transform=\"translate(80.000000, 1361.000000)\">\n                <g transform=\"translate(0.000000, 430.000000)\">\n                  <g transform=\"translate(825.000000, 0.000000)\">\n                    <g transform=\"translate(0.000000, 72.000000)\">\n                      <g transform=\"translate(18.000000, 15.000000)\">\n                        <polygon id=\"Back\" points=\"6.015 4 0 9.013 6.015 14.025\"></polygon>\n                      </g>\n                    </g>\n                  </g>\n                </g>\n              </g>\n            </g>\n          </g>\n        </svg>\n      </ng-template>\n      <span class=\"topbar-title\" (click)=\"toggleView()\">{{ barTitle }}</span>\n      <div (click)=\"nextMonth()\">\n        <ng-template [ngTemplateOutlet]=\"nextMonthButtonTemplate || defaultNextMonthTemplate\"></ng-template>\n      </div>\n      <ng-template #defaultNextMonthTemplate>\n        <svg width=\"7px\"\n             height=\"10px\"\n             viewBox=\"0 0 6 10\"\n             version=\"1.1\"\n             xmlns=\"http://www.w3.org/2000/svg\"\n             xmlns:xlink=\"http://www.w3.org/1999/xlink\">\n          <g id=\"Source-Sans---UI-Elements-Kit\" stroke=\"none\" stroke-width=\"1\" fill=\"none\" fill-rule=\"evenodd\">\n            <g id=\"White-Layout\" transform=\"translate(-1182.000000, -1882.000000)\" fill=\"#CED0DA\">\n              <g id=\"Dropdowns-&amp;-Selector\" transform=\"translate(80.000000, 1361.000000)\">\n                <g id=\"Dropdowns\" transform=\"translate(0.000000, 430.000000)\">\n                  <g id=\"Calendar\" transform=\"translate(825.000000, 0.000000)\">\n                    <g transform=\"translate(0.000000, 72.000000)\" id=\"Top-Bar-Nav\">\n                      <g transform=\"translate(18.000000, 15.000000)\">\n                        <polygon id=\"Forward\"\n                                 transform=\"translate(262.007500, 9.012500) scale(-1, 1) translate(-262.007500, -9.012500) \"\n                                 points=\"265.015 4 259 9.013 265.015 14.025\">\n                        </polygon>\n                      </g>\n                    </g>\n                  </g>\n                </g>\n              </g>\n            </g>\n          </g>\n        </svg>\n      </ng-template>\n    </div>\n    <div class=\"main-calendar-container\">\n      <ng-container *ngIf=\"view === 'days'\">\n        <div class=\"main-calendar-day-names\">\n          <span class=\"day-name-unit\" *ngFor=\"let name of dayNames\">{{ name }}</span>\n        </div>\n        <div class=\"main-calendar-days\">\n          <span class=\"day-unit\"\n                *ngFor=\"let day of days; let i = index;\"\n                (click)=\"day.isSelectable && setDate(i)\">\n            <span class=\"day-background-upper\"\n                  [ngClass]=\"this.getDayClasses(day)\">{{ day.isVisible ? day.day : '' }}</span>\n            <span class=\"day-background-lower\"\n                  [ngClass]=\"this.getDayClasses(day)\"></span>\n          </span>\n        </div>\n      </ng-container>\n      <div *ngIf=\"view === 'years'\">\n        <div class=\"main-calendar-years\" slimScroll [options]=\"scrollOptions\">\n          <span *ngFor=\"let year of years; let i = index;\"\n                class=\"year-unit\"\n                [ngClass]=\"{ 'is-selected': year.isThisYear }\"\n                (click)=\"setYear(i)\"\n          >\n            {{ year.year }}\n          </span>\n        </div>\n        </div>\n      <div *ngIf=\"view === 'months'\" class=\"main-calendar-months\">\n        <span *ngFor=\"let month of months; let i = index;\"\n              class=\"month-unit\"\n              [ngClass]=\"{ 'is-selected': month.isSelected}\"\n              (click)=\"setMonth(i)\"\n        >\n          {{ month.name }}\n        </span>\n      </div>\n    </div>\n  </div>\n</div>\n",
                providers: [
                    { provide: forms.NG_VALUE_ACCESSOR, useExisting: core.forwardRef(function () { return NgxDatesPickerComponent_1; }), multi: true }
                ],
                styles: [".ngx-dates-picker-position-bottom-left{top:40px;right:0}.ngx-dates-picker-position-bottom-right{top:40px;left:0}.ngx-dates-picker-position-top-left{bottom:40px;right:0}.ngx-dates-picker-position-top-right{bottom:40px;left:0}.ngx-dates-picker-position-static{position:static!important}.ngx-dates-picker-container{position:relative}.ngx-dates-picker-input{padding:5px 10px;font-size:14px;width:200px;outline:0;border:1px solid #dfe3e9}.ngx-dates-picker-calendar-container{position:absolute;width:300px;background:#fff;box-shadow:0 1px 4px 0 rgba(0,0,0,.08);border:1px solid #dfe3e9;border-radius:4px}.topbar-container{width:100%;height:50px;padding:0 15px;border-bottom:1px solid #dfe3e9;display:flex;justify-content:space-between;align-items:center;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none}.topbar-container svg{cursor:pointer}.topbar-container svg g{fill:#ced0da}.topbar-container div{cursor:pointer}.topbar-title{color:#3d495c;font-size:14px;font-weight:600;cursor:pointer}.main-calendar-container{width:100%;height:100%;padding:15px 10px 0;font-size:12px;font-weight:500}.main-calendar-day-names{color:#cbcbcb;width:100%;display:flex;align-items:center}.day-name-unit{width:calc(100% / 7);text-transform:uppercase;text-align:center}.main-calendar-days,.main-calendar-years{padding:15px 0 0;width:100%;display:inline-block;overflow:hidden}.day-unit,.month-unit,.year-unit{position:relative;width:calc(100% / 7);font-size:14px;font-weight:400;height:40px;display:inline-flex;float:left;align-items:center;justify-content:center;cursor:pointer;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none}.day-background-upper{display:inline-flex;position:absolute;z-index:1;width:100%;height:100%;border-radius:50%;align-items:center;justify-content:center}.day-background-upper.is-selected{background:#0186ff;color:#fff}.day-background-upper:not(.is-visible){cursor:default}.day-background-upper.is-visible:hover{background:#f0f0f0;color:#000}.day-background-upper.is-visible.is-prev-month{color:#cbcbcb}.day-background-upper.is-visible.is-disabled{cursor:not-allowed;color:#cbcbcb}.day-background-lower{display:inline-flex;position:absolute;z-index:0;width:100%;height:100%;align-items:center;justify-content:center;border-top:2px solid #fff;border-bottom:2px solid #fff}.day-background-lower.is-in-range{background:rgba(1,134,255,.1)}.day-background-lower.range-start{border-bottom-left-radius:50%;border-top-left-radius:50%}.day-background-lower.range-end{border-bottom-right-radius:50%;border-top-right-radius:50%}.main-calendar-years{height:210px;display:block;padding:0}.month-unit{width:calc(100% / 4);height:54px}.year-unit{width:calc(100% / 3)}.month-unit,.year-unit{border-radius:10px}.month-unit.is-selected,.year-unit.is-selected{background:#0186ff;color:#fff}.month-unit:hover,.year-unit:hover{background:#f0f0f0;color:#000}.main-calendar-months{padding-bottom:10px;display:inline-block}"]
            })
        ], NgxDatesPickerComponent);
        return NgxDatesPickerComponent;
    }());

    var NgxDatesPickerModule = /** @class */ (function () {
        function NgxDatesPickerModule() {
        }
        NgxDatesPickerModule = __decorate([
            core.NgModule({
                declarations: [NgxDatesPickerComponent],
                imports: [common.CommonModule, forms.FormsModule, ngxSlimscroll.NgSlimScrollModule],
                exports: [NgxDatesPickerComponent, common.CommonModule, forms.FormsModule, ngxSlimscroll.NgSlimScrollModule]
            })
        ], NgxDatesPickerModule);
        return NgxDatesPickerModule;
    }());

    exports.NgxDatesPickerComponent = NgxDatesPickerComponent;
    exports.NgxDatesPickerModule = NgxDatesPickerModule;
    exports.ɵ0 = ɵ0;

    Object.defineProperty(exports, '__esModule', { value: true });

})));
//# sourceMappingURL=ngx-dates-picker.umd.js.map
