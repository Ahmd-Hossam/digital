{"version":3,"file":"ngx-dates-picker.component.d.ts","sources":["ngx-dates-picker.component.d.ts"],"names":[],"mappingssourcesContent":["import { OnInit, OnChanges, SimpleChanges, ElementRef, TemplateRef } from '@angular/core';\nimport { ControlValueAccessor } from '@angular/forms';\nimport { ISlimScrollOptions } from 'ngx-slimscroll';\nimport { DateRange, Day } from '../models';\nexport declare type AddClass = string | string[] | {\n    [k: string]: boolean;\n} | null;\nexport interface DatepickerOptions {\n    closeOnClickOutside?: boolean;\n    closeOnSelection?: boolean;\n    includeDays?: 'none' | 'previous-month' | 'next-month' | 'all';\n    includeNextMonthsFirstFullWeek?: boolean;\n    minYear?: number;\n    maxYear?: number;\n    displayFormat?: string;\n    barTitleFormat?: string;\n    dayNamesFormat?: string;\n    barTitleIfEmpty?: string;\n    selectRange?: boolean;\n    rangeSeparator?: string;\n    firstCalendarDay?: number;\n    locale?: object;\n    minDate?: Date;\n    maxDate?: Date;\n    /** Placeholder for the input field */\n    placeholder?: string;\n    /** [ngClass] to add to the input field */\n    addClass?: AddClass;\n    /** [ngStyle] to add to the input field */\n    addStyle?: {\n        [k: string]: any;\n    } | null;\n    /** ID to assign to the input field */\n    fieldId?: string;\n    /** If false, barTitleIfEmpty will be disregarded and a date will always be shown. Default: true */\n    useEmptyBarTitle?: boolean;\n}\nexport declare type PickerPosition = 'bottom-left' | 'bottom-right' | 'top-left' | 'top-right' | 'static';\nexport declare class NgxDatesPickerComponent implements ControlValueAccessor, OnInit, OnChanges {\n    calendarContainerElement: ElementRef;\n    inputElement: ElementRef;\n    options: DatepickerOptions;\n    /**\n     * Disable datepicker's input\n     */\n    headless: boolean;\n    /**\n     * Set datepicker's visibility state\n     */\n    isOpened: boolean;\n    /**\n     * Datepicker dropdown position\n     */\n    position: PickerPosition;\n    previousMonthButtonTemplate: TemplateRef<any>;\n    nextMonthButtonTemplate: TemplateRef<any>;\n    currentOptions: DatepickerOptions;\n    displayValue: string;\n    viewingDate: Date;\n    barTitle: string;\n    view: 'days' | 'months' | 'years';\n    years: {\n        year: number;\n        isThisYear: boolean;\n    }[];\n    months: {\n        month: number;\n        name: string;\n        isSelected: boolean;\n    }[];\n    dayNames: string[];\n    scrollOptions: ISlimScrollOptions;\n    days: Day[];\n    fieldId: string;\n    disabled: boolean;\n    private _range;\n    private onTouchedCallback;\n    private onChangeCallback;\n    setDisabledState(isDisabled: boolean): void;\n    set range(val: DateRange | undefined);\n    get range(): DateRange | undefined;\n    constructor();\n    ngOnInit(): void;\n    ngOnChanges(changes: SimpleChanges): void;\n    get defaultFieldId(): string;\n    updateOptions(options: DatepickerOptions): void;\n    nextMonth(): void;\n    prevMonth(): void;\n    setDate(i: number): void;\n    setYear(i: number): void;\n    setMonth(i: number): void;\n    init(): void;\n    initYears(): void;\n    initMonths(): void;\n    initDayNames(): void;\n    toggleView(): void;\n    toggle(): void;\n    close(): void;\n    reset(): void;\n    writeValue(val: DateRange | Date | string | undefined): void;\n    registerOnChange(fn: any): void;\n    registerOnTouched(fn: any): void;\n    onBlur(e: MouseEvent): void;\n    formatDay: (date: Date, isVisible?: boolean) => Day;\n    getDayClasses(day: Day): AddClass;\n    /**\n     * Checks if specified date is in range of min and max dates\n     * @param date\n     */\n    private isDateSelectable;\n    private isDateSelected;\n    private isInRange;\n    private formatDisplay;\n    private isRangeBoundary;\n    private getValueToEmit;\n}\n"]}